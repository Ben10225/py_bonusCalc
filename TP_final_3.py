# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file '.\TP_final_3.ui'
#
# Created by: PyQt5 UI code generator 5.15.6
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
import math
from decimal import Decimal, ROUND_HALF_UP


class Ui_Form(object):
    def setupUi(self, Form):
        Form.setObjectName("Form")
        Form.resize(1441, 938)
        self.proj = QtWidgets.QLineEdit(Form)
        self.proj.setGeometry(QtCore.QRect(20, 40, 311, 41))
        font = QtGui.QFont()
        font.setFamily("微軟正黑體")
        font.setPointSize(18)
        font.setBold(True)
        font.setWeight(75)
        self.proj.setFont(font)
        self.proj.setText("")
        self.proj.setAlignment(QtCore.Qt.AlignRight|QtCore.Qt.AlignTrailing|QtCore.Qt.AlignVCenter)
        self.proj.setObjectName("proj")
        self.case_money = QtWidgets.QLineEdit(Form)
        self.case_money.setGeometry(QtCore.QRect(210, 90, 121, 41))
        font = QtGui.QFont()
        font.setFamily("微軟正黑體")
        font.setPointSize(18)
        font.setBold(True)
        font.setWeight(75)
        self.case_money.setFont(font)
        self.case_money.setText("")
        self.case_money.setAlignment(QtCore.Qt.AlignRight|QtCore.Qt.AlignTrailing|QtCore.Qt.AlignVCenter)
        self.case_money.setObjectName("case_money")
        self.dayline = QtWidgets.QLineEdit(Form)
        self.dayline.setGeometry(QtCore.QRect(70, 90, 131, 41))
        font = QtGui.QFont()
        font.setFamily("微軟正黑體")
        font.setPointSize(18)
        font.setBold(True)
        font.setWeight(75)
        self.dayline.setFont(font)
        self.dayline.setText("")
        self.dayline.setAlignment(QtCore.Qt.AlignRight|QtCore.Qt.AlignTrailing|QtCore.Qt.AlignVCenter)
        self.dayline.setObjectName("dayline")
        self.whole_bonus_la = QtWidgets.QLabel(Form)
        self.whole_bonus_la.setGeometry(QtCore.QRect(100, 140, 101, 41))
        font = QtGui.QFont()
        font.setFamily("微軟正黑體")
        font.setPointSize(18)
        font.setBold(True)
        font.setWeight(75)
        self.whole_bonus_la.setFont(font)
        self.whole_bonus_la.setObjectName("whole_bonus_la")
        self.whole_bonus = QtWidgets.QLineEdit(Form)
        self.whole_bonus.setGeometry(QtCore.QRect(210, 140, 121, 41))
        font = QtGui.QFont()
        font.setFamily("微軟正黑體")
        font.setPointSize(18)
        font.setBold(True)
        font.setWeight(75)
        self.whole_bonus.setFont(font)
        self.whole_bonus.setText("")
        self.whole_bonus.setAlignment(QtCore.Qt.AlignRight|QtCore.Qt.AlignTrailing|QtCore.Qt.AlignVCenter)
        self.whole_bonus.setReadOnly(True)
        self.whole_bonus.setPlaceholderText("")
        self.whole_bonus.setObjectName("whole_bonus")
        self.leader_bonus_la = QtWidgets.QLabel(Form)
        self.leader_bonus_la.setGeometry(QtCore.QRect(100, 190, 101, 41))
        font = QtGui.QFont()
        font.setFamily("微軟正黑體")
        font.setPointSize(18)
        font.setBold(True)
        font.setWeight(75)
        self.leader_bonus_la.setFont(font)
        self.leader_bonus_la.setObjectName("leader_bonus_la")
        self.leader_bonus = QtWidgets.QLineEdit(Form)
        self.leader_bonus.setGeometry(QtCore.QRect(210, 190, 121, 41))
        font = QtGui.QFont()
        font.setFamily("微軟正黑體")
        font.setPointSize(18)
        font.setBold(True)
        font.setWeight(75)
        self.leader_bonus.setFont(font)
        self.leader_bonus.setText("")
        self.leader_bonus.setAlignment(QtCore.Qt.AlignRight|QtCore.Qt.AlignTrailing|QtCore.Qt.AlignVCenter)
        self.leader_bonus.setReadOnly(True)
        self.leader_bonus.setPlaceholderText("")
        self.leader_bonus.setObjectName("leader_bonus")
        self.pa1_la = QtWidgets.QLabel(Form)
        self.pa1_la.setGeometry(QtCore.QRect(170, 240, 21, 41))
        font = QtGui.QFont()
        font.setFamily("微軟正黑體")
        font.setPointSize(18)
        font.setBold(True)
        font.setWeight(75)
        self.pa1_la.setFont(font)
        self.pa1_la.setObjectName("pa1_la")
        self.bonus2 = QtWidgets.QLineEdit(Form)
        self.bonus2.setGeometry(QtCore.QRect(210, 290, 121, 41))
        font = QtGui.QFont()
        font.setFamily("微軟正黑體")
        font.setPointSize(18)
        font.setBold(True)
        font.setWeight(75)
        self.bonus2.setFont(font)
        self.bonus2.setText("")
        self.bonus2.setAlignment(QtCore.Qt.AlignRight|QtCore.Qt.AlignTrailing|QtCore.Qt.AlignVCenter)
        self.bonus2.setReadOnly(True)
        self.bonus2.setPlaceholderText("")
        self.bonus2.setObjectName("bonus2")
        self.bonus1 = QtWidgets.QLineEdit(Form)
        self.bonus1.setGeometry(QtCore.QRect(210, 240, 121, 41))
        font = QtGui.QFont()
        font.setFamily("微軟正黑體")
        font.setPointSize(18)
        font.setBold(True)
        font.setWeight(75)
        self.bonus1.setFont(font)
        self.bonus1.setText("")
        self.bonus1.setAlignment(QtCore.Qt.AlignRight|QtCore.Qt.AlignTrailing|QtCore.Qt.AlignVCenter)
        self.bonus1.setReadOnly(True)
        self.bonus1.setPlaceholderText("")
        self.bonus1.setObjectName("bonus1")
        self.bonus3 = QtWidgets.QLineEdit(Form)
        self.bonus3.setGeometry(QtCore.QRect(210, 340, 121, 41))
        font = QtGui.QFont()
        font.setFamily("微軟正黑體")
        font.setPointSize(18)
        font.setBold(True)
        font.setWeight(75)
        self.bonus3.setFont(font)
        self.bonus3.setText("")
        self.bonus3.setAlignment(QtCore.Qt.AlignRight|QtCore.Qt.AlignTrailing|QtCore.Qt.AlignVCenter)
        self.bonus3.setReadOnly(True)
        self.bonus3.setPlaceholderText("")
        self.bonus3.setObjectName("bonus3")
        self.bonus4 = QtWidgets.QLineEdit(Form)
        self.bonus4.setGeometry(QtCore.QRect(210, 390, 121, 41))
        font = QtGui.QFont()
        font.setFamily("微軟正黑體")
        font.setPointSize(18)
        font.setBold(True)
        font.setWeight(75)
        self.bonus4.setFont(font)
        self.bonus4.setText("")
        self.bonus4.setAlignment(QtCore.Qt.AlignRight|QtCore.Qt.AlignTrailing|QtCore.Qt.AlignVCenter)
        self.bonus4.setReadOnly(True)
        self.bonus4.setPlaceholderText("")
        self.bonus4.setObjectName("bonus4")
        self.leader = QtWidgets.QLabel(Form)
        self.leader.setGeometry(QtCore.QRect(0, 240, 101, 41))
        font = QtGui.QFont()
        font.setFamily("微軟正黑體")
        font.setPointSize(18)
        font.setBold(True)
        font.setWeight(75)
        self.leader.setFont(font)
        self.leader.setText("")
        self.leader.setAlignment(QtCore.Qt.AlignRight|QtCore.Qt.AlignTrailing|QtCore.Qt.AlignVCenter)
        self.leader.setObjectName("leader")
        self.mate1 = QtWidgets.QLabel(Form)
        self.mate1.setGeometry(QtCore.QRect(0, 290, 101, 41))
        font = QtGui.QFont()
        font.setFamily("微軟正黑體")
        font.setPointSize(18)
        font.setBold(True)
        font.setWeight(75)
        self.mate1.setFont(font)
        self.mate1.setText("")
        self.mate1.setAlignment(QtCore.Qt.AlignRight|QtCore.Qt.AlignTrailing|QtCore.Qt.AlignVCenter)
        self.mate1.setObjectName("mate1")
        self.mate2 = QtWidgets.QLabel(Form)
        self.mate2.setGeometry(QtCore.QRect(0, 340, 101, 41))
        font = QtGui.QFont()
        font.setFamily("微軟正黑體")
        font.setPointSize(18)
        font.setBold(True)
        font.setWeight(75)
        self.mate2.setFont(font)
        self.mate2.setText("")
        self.mate2.setAlignment(QtCore.Qt.AlignRight|QtCore.Qt.AlignTrailing|QtCore.Qt.AlignVCenter)
        self.mate2.setObjectName("mate2")
        self.mate3 = QtWidgets.QLabel(Form)
        self.mate3.setGeometry(QtCore.QRect(0, 390, 101, 41))
        font = QtGui.QFont()
        font.setFamily("微軟正黑體")
        font.setPointSize(18)
        font.setBold(True)
        font.setWeight(75)
        self.mate3.setFont(font)
        self.mate3.setText("")
        self.mate3.setAlignment(QtCore.Qt.AlignRight|QtCore.Qt.AlignTrailing|QtCore.Qt.AlignVCenter)
        self.mate3.setObjectName("mate3")
        self.pa1 = QtWidgets.QLineEdit(Form)
        self.pa1.setGeometry(QtCore.QRect(110, 240, 51, 41))
        font = QtGui.QFont()
        font.setFamily("微軟正黑體")
        font.setPointSize(18)
        font.setBold(True)
        font.setWeight(75)
        self.pa1.setFont(font)
        self.pa1.setText("")
        self.pa1.setAlignment(QtCore.Qt.AlignRight|QtCore.Qt.AlignTrailing|QtCore.Qt.AlignVCenter)
        self.pa1.setPlaceholderText("")
        self.pa1.setObjectName("pa1")
        self.pa2 = QtWidgets.QLineEdit(Form)
        self.pa2.setGeometry(QtCore.QRect(110, 290, 51, 41))
        font = QtGui.QFont()
        font.setFamily("微軟正黑體")
        font.setPointSize(18)
        font.setBold(True)
        font.setWeight(75)
        self.pa2.setFont(font)
        self.pa2.setText("")
        self.pa2.setAlignment(QtCore.Qt.AlignRight|QtCore.Qt.AlignTrailing|QtCore.Qt.AlignVCenter)
        self.pa2.setPlaceholderText("")
        self.pa2.setObjectName("pa2")
        self.pa4 = QtWidgets.QLineEdit(Form)
        self.pa4.setGeometry(QtCore.QRect(110, 390, 51, 41))
        font = QtGui.QFont()
        font.setFamily("微軟正黑體")
        font.setPointSize(18)
        font.setBold(True)
        font.setWeight(75)
        self.pa4.setFont(font)
        self.pa4.setText("")
        self.pa4.setAlignment(QtCore.Qt.AlignRight|QtCore.Qt.AlignTrailing|QtCore.Qt.AlignVCenter)
        self.pa4.setPlaceholderText("")
        self.pa4.setObjectName("pa4")
        self.pa3 = QtWidgets.QLineEdit(Form)
        self.pa3.setGeometry(QtCore.QRect(110, 340, 51, 41))
        font = QtGui.QFont()
        font.setFamily("微軟正黑體")
        font.setPointSize(18)
        font.setBold(True)
        font.setWeight(75)
        self.pa3.setFont(font)
        self.pa3.setText("")
        self.pa3.setAlignment(QtCore.Qt.AlignRight|QtCore.Qt.AlignTrailing|QtCore.Qt.AlignVCenter)
        self.pa3.setPlaceholderText("")
        self.pa3.setObjectName("pa3")
        self.pa2_la = QtWidgets.QLabel(Form)
        self.pa2_la.setGeometry(QtCore.QRect(170, 290, 21, 41))
        font = QtGui.QFont()
        font.setFamily("微軟正黑體")
        font.setPointSize(18)
        font.setBold(True)
        font.setWeight(75)
        self.pa2_la.setFont(font)
        self.pa2_la.setObjectName("pa2_la")
        self.pa3_la = QtWidgets.QLabel(Form)
        self.pa3_la.setGeometry(QtCore.QRect(170, 340, 21, 41))
        font = QtGui.QFont()
        font.setFamily("微軟正黑體")
        font.setPointSize(18)
        font.setBold(True)
        font.setWeight(75)
        self.pa3_la.setFont(font)
        self.pa3_la.setObjectName("pa3_la")
        self.pa4_la = QtWidgets.QLabel(Form)
        self.pa4_la.setGeometry(QtCore.QRect(170, 390, 21, 41))
        font = QtGui.QFont()
        font.setFamily("微軟正黑體")
        font.setPointSize(18)
        font.setBold(True)
        font.setWeight(75)
        self.pa4_la.setFont(font)
        self.pa4_la.setObjectName("pa4_la")
        self.whole_bonus_la_2 = QtWidgets.QLabel(Form)
        self.whole_bonus_la_2.setGeometry(QtCore.QRect(100, 610, 101, 41))
        font = QtGui.QFont()
        font.setFamily("微軟正黑體")
        font.setPointSize(18)
        font.setBold(True)
        font.setWeight(75)
        self.whole_bonus_la_2.setFont(font)
        self.whole_bonus_la_2.setObjectName("whole_bonus_la_2")
        self.pa4_la_2 = QtWidgets.QLabel(Form)
        self.pa4_la_2.setGeometry(QtCore.QRect(170, 860, 21, 41))
        font = QtGui.QFont()
        font.setFamily("微軟正黑體")
        font.setPointSize(18)
        font.setBold(True)
        font.setWeight(75)
        self.pa4_la_2.setFont(font)
        self.pa4_la_2.setObjectName("pa4_la_2")
        self.leader_bonus_la_2 = QtWidgets.QLabel(Form)
        self.leader_bonus_la_2.setGeometry(QtCore.QRect(100, 660, 101, 41))
        font = QtGui.QFont()
        font.setFamily("微軟正黑體")
        font.setPointSize(18)
        font.setBold(True)
        font.setWeight(75)
        self.leader_bonus_la_2.setFont(font)
        self.leader_bonus_la_2.setObjectName("leader_bonus_la_2")
        self.bonus2_2 = QtWidgets.QLineEdit(Form)
        self.bonus2_2.setGeometry(QtCore.QRect(210, 760, 121, 41))
        font = QtGui.QFont()
        font.setFamily("微軟正黑體")
        font.setPointSize(18)
        font.setBold(True)
        font.setWeight(75)
        self.bonus2_2.setFont(font)
        self.bonus2_2.setText("")
        self.bonus2_2.setAlignment(QtCore.Qt.AlignRight|QtCore.Qt.AlignTrailing|QtCore.Qt.AlignVCenter)
        self.bonus2_2.setReadOnly(True)
        self.bonus2_2.setPlaceholderText("")
        self.bonus2_2.setObjectName("bonus2_2")
        self.pa1_la_2 = QtWidgets.QLabel(Form)
        self.pa1_la_2.setGeometry(QtCore.QRect(170, 710, 21, 41))
        font = QtGui.QFont()
        font.setFamily("微軟正黑體")
        font.setPointSize(18)
        font.setBold(True)
        font.setWeight(75)
        self.pa1_la_2.setFont(font)
        self.pa1_la_2.setObjectName("pa1_la_2")
        self.pa3_2 = QtWidgets.QLineEdit(Form)
        self.pa3_2.setGeometry(QtCore.QRect(110, 810, 51, 41))
        font = QtGui.QFont()
        font.setFamily("微軟正黑體")
        font.setPointSize(18)
        font.setBold(True)
        font.setWeight(75)
        self.pa3_2.setFont(font)
        self.pa3_2.setText("")
        self.pa3_2.setAlignment(QtCore.Qt.AlignRight|QtCore.Qt.AlignTrailing|QtCore.Qt.AlignVCenter)
        self.pa3_2.setPlaceholderText("")
        self.pa3_2.setObjectName("pa3_2")
        self.pa2_2 = QtWidgets.QLineEdit(Form)
        self.pa2_2.setGeometry(QtCore.QRect(110, 760, 51, 41))
        font = QtGui.QFont()
        font.setFamily("微軟正黑體")
        font.setPointSize(18)
        font.setBold(True)
        font.setWeight(75)
        self.pa2_2.setFont(font)
        self.pa2_2.setText("")
        self.pa2_2.setAlignment(QtCore.Qt.AlignRight|QtCore.Qt.AlignTrailing|QtCore.Qt.AlignVCenter)
        self.pa2_2.setPlaceholderText("")
        self.pa2_2.setObjectName("pa2_2")
        self.mate1_2 = QtWidgets.QLabel(Form)
        self.mate1_2.setGeometry(QtCore.QRect(0, 760, 101, 41))
        font = QtGui.QFont()
        font.setFamily("微軟正黑體")
        font.setPointSize(18)
        font.setBold(True)
        font.setWeight(75)
        self.mate1_2.setFont(font)
        self.mate1_2.setText("")
        self.mate1_2.setAlignment(QtCore.Qt.AlignRight|QtCore.Qt.AlignTrailing|QtCore.Qt.AlignVCenter)
        self.mate1_2.setObjectName("mate1_2")
        self.whole_bonus_2 = QtWidgets.QLineEdit(Form)
        self.whole_bonus_2.setGeometry(QtCore.QRect(210, 610, 121, 41))
        font = QtGui.QFont()
        font.setFamily("微軟正黑體")
        font.setPointSize(18)
        font.setBold(True)
        font.setWeight(75)
        self.whole_bonus_2.setFont(font)
        self.whole_bonus_2.setText("")
        self.whole_bonus_2.setAlignment(QtCore.Qt.AlignRight|QtCore.Qt.AlignTrailing|QtCore.Qt.AlignVCenter)
        self.whole_bonus_2.setReadOnly(True)
        self.whole_bonus_2.setPlaceholderText("")
        self.whole_bonus_2.setObjectName("whole_bonus_2")
        self.bonus3_2 = QtWidgets.QLineEdit(Form)
        self.bonus3_2.setGeometry(QtCore.QRect(210, 810, 121, 41))
        font = QtGui.QFont()
        font.setFamily("微軟正黑體")
        font.setPointSize(18)
        font.setBold(True)
        font.setWeight(75)
        self.bonus3_2.setFont(font)
        self.bonus3_2.setText("")
        self.bonus3_2.setAlignment(QtCore.Qt.AlignRight|QtCore.Qt.AlignTrailing|QtCore.Qt.AlignVCenter)
        self.bonus3_2.setReadOnly(True)
        self.bonus3_2.setPlaceholderText("")
        self.bonus3_2.setObjectName("bonus3_2")
        self.pa4_2 = QtWidgets.QLineEdit(Form)
        self.pa4_2.setGeometry(QtCore.QRect(110, 860, 51, 41))
        font = QtGui.QFont()
        font.setFamily("微軟正黑體")
        font.setPointSize(18)
        font.setBold(True)
        font.setWeight(75)
        self.pa4_2.setFont(font)
        self.pa4_2.setText("")
        self.pa4_2.setAlignment(QtCore.Qt.AlignRight|QtCore.Qt.AlignTrailing|QtCore.Qt.AlignVCenter)
        self.pa4_2.setPlaceholderText("")
        self.pa4_2.setObjectName("pa4_2")
        self.dayline_2 = QtWidgets.QLineEdit(Form)
        self.dayline_2.setGeometry(QtCore.QRect(70, 560, 131, 41))
        font = QtGui.QFont()
        font.setFamily("微軟正黑體")
        font.setPointSize(18)
        font.setBold(True)
        font.setWeight(75)
        self.dayline_2.setFont(font)
        self.dayline_2.setText("")
        self.dayline_2.setAlignment(QtCore.Qt.AlignRight|QtCore.Qt.AlignTrailing|QtCore.Qt.AlignVCenter)
        self.dayline_2.setObjectName("dayline_2")
        self.mate2_2 = QtWidgets.QLabel(Form)
        self.mate2_2.setGeometry(QtCore.QRect(0, 810, 101, 41))
        font = QtGui.QFont()
        font.setFamily("微軟正黑體")
        font.setPointSize(18)
        font.setBold(True)
        font.setWeight(75)
        self.mate2_2.setFont(font)
        self.mate2_2.setText("")
        self.mate2_2.setAlignment(QtCore.Qt.AlignRight|QtCore.Qt.AlignTrailing|QtCore.Qt.AlignVCenter)
        self.mate2_2.setObjectName("mate2_2")
        self.bonus1_2 = QtWidgets.QLineEdit(Form)
        self.bonus1_2.setGeometry(QtCore.QRect(210, 710, 121, 41))
        font = QtGui.QFont()
        font.setFamily("微軟正黑體")
        font.setPointSize(18)
        font.setBold(True)
        font.setWeight(75)
        self.bonus1_2.setFont(font)
        self.bonus1_2.setText("")
        self.bonus1_2.setAlignment(QtCore.Qt.AlignRight|QtCore.Qt.AlignTrailing|QtCore.Qt.AlignVCenter)
        self.bonus1_2.setReadOnly(True)
        self.bonus1_2.setPlaceholderText("")
        self.bonus1_2.setObjectName("bonus1_2")
        self.leader_bonus_2 = QtWidgets.QLineEdit(Form)
        self.leader_bonus_2.setGeometry(QtCore.QRect(210, 660, 121, 41))
        font = QtGui.QFont()
        font.setFamily("微軟正黑體")
        font.setPointSize(18)
        font.setBold(True)
        font.setWeight(75)
        self.leader_bonus_2.setFont(font)
        self.leader_bonus_2.setText("")
        self.leader_bonus_2.setAlignment(QtCore.Qt.AlignRight|QtCore.Qt.AlignTrailing|QtCore.Qt.AlignVCenter)
        self.leader_bonus_2.setReadOnly(True)
        self.leader_bonus_2.setPlaceholderText("")
        self.leader_bonus_2.setObjectName("leader_bonus_2")
        self.pa1_2 = QtWidgets.QLineEdit(Form)
        self.pa1_2.setGeometry(QtCore.QRect(110, 710, 51, 41))
        font = QtGui.QFont()
        font.setFamily("微軟正黑體")
        font.setPointSize(18)
        font.setBold(True)
        font.setWeight(75)
        self.pa1_2.setFont(font)
        self.pa1_2.setText("")
        self.pa1_2.setAlignment(QtCore.Qt.AlignRight|QtCore.Qt.AlignTrailing|QtCore.Qt.AlignVCenter)
        self.pa1_2.setPlaceholderText("")
        self.pa1_2.setObjectName("pa1_2")
        self.leader_2 = QtWidgets.QLabel(Form)
        self.leader_2.setGeometry(QtCore.QRect(0, 710, 101, 41))
        font = QtGui.QFont()
        font.setFamily("微軟正黑體")
        font.setPointSize(18)
        font.setBold(True)
        font.setWeight(75)
        self.leader_2.setFont(font)
        self.leader_2.setText("")
        self.leader_2.setAlignment(QtCore.Qt.AlignRight|QtCore.Qt.AlignTrailing|QtCore.Qt.AlignVCenter)
        self.leader_2.setObjectName("leader_2")
        self.pa2_la_2 = QtWidgets.QLabel(Form)
        self.pa2_la_2.setGeometry(QtCore.QRect(170, 760, 21, 41))
        font = QtGui.QFont()
        font.setFamily("微軟正黑體")
        font.setPointSize(18)
        font.setBold(True)
        font.setWeight(75)
        self.pa2_la_2.setFont(font)
        self.pa2_la_2.setObjectName("pa2_la_2")
        self.mate3_2 = QtWidgets.QLabel(Form)
        self.mate3_2.setGeometry(QtCore.QRect(0, 860, 101, 41))
        font = QtGui.QFont()
        font.setFamily("微軟正黑體")
        font.setPointSize(18)
        font.setBold(True)
        font.setWeight(75)
        self.mate3_2.setFont(font)
        self.mate3_2.setText("")
        self.mate3_2.setAlignment(QtCore.Qt.AlignRight|QtCore.Qt.AlignTrailing|QtCore.Qt.AlignVCenter)
        self.mate3_2.setObjectName("mate3_2")
        self.pa3_la_2 = QtWidgets.QLabel(Form)
        self.pa3_la_2.setGeometry(QtCore.QRect(170, 810, 21, 41))
        font = QtGui.QFont()
        font.setFamily("微軟正黑體")
        font.setPointSize(18)
        font.setBold(True)
        font.setWeight(75)
        self.pa3_la_2.setFont(font)
        self.pa3_la_2.setObjectName("pa3_la_2")
        self.bonus4_2 = QtWidgets.QLineEdit(Form)
        self.bonus4_2.setGeometry(QtCore.QRect(210, 860, 121, 41))
        font = QtGui.QFont()
        font.setFamily("微軟正黑體")
        font.setPointSize(18)
        font.setBold(True)
        font.setWeight(75)
        self.bonus4_2.setFont(font)
        self.bonus4_2.setText("")
        self.bonus4_2.setAlignment(QtCore.Qt.AlignRight|QtCore.Qt.AlignTrailing|QtCore.Qt.AlignVCenter)
        self.bonus4_2.setReadOnly(True)
        self.bonus4_2.setPlaceholderText("")
        self.bonus4_2.setObjectName("bonus4_2")
        self.proj_2 = QtWidgets.QLineEdit(Form)
        self.proj_2.setGeometry(QtCore.QRect(20, 510, 311, 41))
        font = QtGui.QFont()
        font.setFamily("微軟正黑體")
        font.setPointSize(18)
        font.setBold(True)
        font.setWeight(75)
        self.proj_2.setFont(font)
        self.proj_2.setText("")
        self.proj_2.setAlignment(QtCore.Qt.AlignRight|QtCore.Qt.AlignTrailing|QtCore.Qt.AlignVCenter)
        self.proj_2.setObjectName("proj_2")
        self.case_money_2 = QtWidgets.QLineEdit(Form)
        self.case_money_2.setGeometry(QtCore.QRect(210, 560, 121, 41))
        font = QtGui.QFont()
        font.setFamily("微軟正黑體")
        font.setPointSize(18)
        font.setBold(True)
        font.setWeight(75)
        self.case_money_2.setFont(font)
        self.case_money_2.setText("")
        self.case_money_2.setAlignment(QtCore.Qt.AlignRight|QtCore.Qt.AlignTrailing|QtCore.Qt.AlignVCenter)
        self.case_money_2.setObjectName("case_money_2")
        self.case_money_4 = QtWidgets.QLineEdit(Form)
        self.case_money_4.setGeometry(QtCore.QRect(610, 560, 121, 41))
        font = QtGui.QFont()
        font.setFamily("微軟正黑體")
        font.setPointSize(18)
        font.setBold(True)
        font.setWeight(75)
        self.case_money_4.setFont(font)
        self.case_money_4.setText("")
        self.case_money_4.setAlignment(QtCore.Qt.AlignRight|QtCore.Qt.AlignTrailing|QtCore.Qt.AlignVCenter)
        self.case_money_4.setObjectName("case_money_4")
        self.bonus1_3 = QtWidgets.QLineEdit(Form)
        self.bonus1_3.setGeometry(QtCore.QRect(610, 240, 121, 41))
        font = QtGui.QFont()
        font.setFamily("微軟正黑體")
        font.setPointSize(18)
        font.setBold(True)
        font.setWeight(75)
        self.bonus1_3.setFont(font)
        self.bonus1_3.setText("")
        self.bonus1_3.setAlignment(QtCore.Qt.AlignRight|QtCore.Qt.AlignTrailing|QtCore.Qt.AlignVCenter)
        self.bonus1_3.setReadOnly(True)
        self.bonus1_3.setPlaceholderText("")
        self.bonus1_3.setObjectName("bonus1_3")
        self.pa4_la_3 = QtWidgets.QLabel(Form)
        self.pa4_la_3.setGeometry(QtCore.QRect(570, 390, 21, 41))
        font = QtGui.QFont()
        font.setFamily("微軟正黑體")
        font.setPointSize(18)
        font.setBold(True)
        font.setWeight(75)
        self.pa4_la_3.setFont(font)
        self.pa4_la_3.setObjectName("pa4_la_3")
        self.bonus3_4 = QtWidgets.QLineEdit(Form)
        self.bonus3_4.setGeometry(QtCore.QRect(610, 810, 121, 41))
        font = QtGui.QFont()
        font.setFamily("微軟正黑體")
        font.setPointSize(18)
        font.setBold(True)
        font.setWeight(75)
        self.bonus3_4.setFont(font)
        self.bonus3_4.setText("")
        self.bonus3_4.setAlignment(QtCore.Qt.AlignRight|QtCore.Qt.AlignTrailing|QtCore.Qt.AlignVCenter)
        self.bonus3_4.setReadOnly(True)
        self.bonus3_4.setPlaceholderText("")
        self.bonus3_4.setObjectName("bonus3_4")
        self.mate1_4 = QtWidgets.QLabel(Form)
        self.mate1_4.setGeometry(QtCore.QRect(400, 760, 101, 41))
        font = QtGui.QFont()
        font.setFamily("微軟正黑體")
        font.setPointSize(18)
        font.setBold(True)
        font.setWeight(75)
        self.mate1_4.setFont(font)
        self.mate1_4.setText("")
        self.mate1_4.setAlignment(QtCore.Qt.AlignRight|QtCore.Qt.AlignTrailing|QtCore.Qt.AlignVCenter)
        self.mate1_4.setObjectName("mate1_4")
        self.mate1_3 = QtWidgets.QLabel(Form)
        self.mate1_3.setGeometry(QtCore.QRect(400, 290, 101, 41))
        font = QtGui.QFont()
        font.setFamily("微軟正黑體")
        font.setPointSize(18)
        font.setBold(True)
        font.setWeight(75)
        self.mate1_3.setFont(font)
        self.mate1_3.setText("")
        self.mate1_3.setAlignment(QtCore.Qt.AlignRight|QtCore.Qt.AlignTrailing|QtCore.Qt.AlignVCenter)
        self.mate1_3.setObjectName("mate1_3")
        self.leader_bonus_3 = QtWidgets.QLineEdit(Form)
        self.leader_bonus_3.setGeometry(QtCore.QRect(610, 190, 121, 41))
        font = QtGui.QFont()
        font.setFamily("微軟正黑體")
        font.setPointSize(18)
        font.setBold(True)
        font.setWeight(75)
        self.leader_bonus_3.setFont(font)
        self.leader_bonus_3.setText("")
        self.leader_bonus_3.setAlignment(QtCore.Qt.AlignRight|QtCore.Qt.AlignTrailing|QtCore.Qt.AlignVCenter)
        self.leader_bonus_3.setReadOnly(True)
        self.leader_bonus_3.setPlaceholderText("")
        self.leader_bonus_3.setObjectName("leader_bonus_3")
        self.whole_bonus_la_3 = QtWidgets.QLabel(Form)
        self.whole_bonus_la_3.setGeometry(QtCore.QRect(500, 140, 101, 41))
        font = QtGui.QFont()
        font.setFamily("微軟正黑體")
        font.setPointSize(18)
        font.setBold(True)
        font.setWeight(75)
        self.whole_bonus_la_3.setFont(font)
        self.whole_bonus_la_3.setObjectName("whole_bonus_la_3")
        self.pa3_3 = QtWidgets.QLineEdit(Form)
        self.pa3_3.setGeometry(QtCore.QRect(510, 340, 51, 41))
        font = QtGui.QFont()
        font.setFamily("微軟正黑體")
        font.setPointSize(18)
        font.setBold(True)
        font.setWeight(75)
        self.pa3_3.setFont(font)
        self.pa3_3.setText("")
        self.pa3_3.setAlignment(QtCore.Qt.AlignRight|QtCore.Qt.AlignTrailing|QtCore.Qt.AlignVCenter)
        self.pa3_3.setPlaceholderText("")
        self.pa3_3.setObjectName("pa3_3")
        self.case_money_3 = QtWidgets.QLineEdit(Form)
        self.case_money_3.setGeometry(QtCore.QRect(610, 90, 121, 41))
        font = QtGui.QFont()
        font.setFamily("微軟正黑體")
        font.setPointSize(18)
        font.setBold(True)
        font.setWeight(75)
        self.case_money_3.setFont(font)
        self.case_money_3.setText("")
        self.case_money_3.setAlignment(QtCore.Qt.AlignRight|QtCore.Qt.AlignTrailing|QtCore.Qt.AlignVCenter)
        self.case_money_3.setObjectName("case_money_3")
        self.mate3_3 = QtWidgets.QLabel(Form)
        self.mate3_3.setGeometry(QtCore.QRect(400, 390, 101, 41))
        font = QtGui.QFont()
        font.setFamily("微軟正黑體")
        font.setPointSize(18)
        font.setBold(True)
        font.setWeight(75)
        self.mate3_3.setFont(font)
        self.mate3_3.setText("")
        self.mate3_3.setAlignment(QtCore.Qt.AlignRight|QtCore.Qt.AlignTrailing|QtCore.Qt.AlignVCenter)
        self.mate3_3.setObjectName("mate3_3")
        self.pa1_4 = QtWidgets.QLineEdit(Form)
        self.pa1_4.setGeometry(QtCore.QRect(510, 710, 51, 41))
        font = QtGui.QFont()
        font.setFamily("微軟正黑體")
        font.setPointSize(18)
        font.setBold(True)
        font.setWeight(75)
        self.pa1_4.setFont(font)
        self.pa1_4.setText("")
        self.pa1_4.setAlignment(QtCore.Qt.AlignRight|QtCore.Qt.AlignTrailing|QtCore.Qt.AlignVCenter)
        self.pa1_4.setPlaceholderText("")
        self.pa1_4.setObjectName("pa1_4")
        self.bonus2_3 = QtWidgets.QLineEdit(Form)
        self.bonus2_3.setGeometry(QtCore.QRect(610, 290, 121, 41))
        font = QtGui.QFont()
        font.setFamily("微軟正黑體")
        font.setPointSize(18)
        font.setBold(True)
        font.setWeight(75)
        self.bonus2_3.setFont(font)
        self.bonus2_3.setText("")
        self.bonus2_3.setAlignment(QtCore.Qt.AlignRight|QtCore.Qt.AlignTrailing|QtCore.Qt.AlignVCenter)
        self.bonus2_3.setReadOnly(True)
        self.bonus2_3.setPlaceholderText("")
        self.bonus2_3.setObjectName("bonus2_3")
        self.mate3_4 = QtWidgets.QLabel(Form)
        self.mate3_4.setGeometry(QtCore.QRect(400, 860, 101, 41))
        font = QtGui.QFont()
        font.setFamily("微軟正黑體")
        font.setPointSize(18)
        font.setBold(True)
        font.setWeight(75)
        self.mate3_4.setFont(font)
        self.mate3_4.setText("")
        self.mate3_4.setAlignment(QtCore.Qt.AlignRight|QtCore.Qt.AlignTrailing|QtCore.Qt.AlignVCenter)
        self.mate3_4.setObjectName("mate3_4")
        self.proj_3 = QtWidgets.QLineEdit(Form)
        self.proj_3.setGeometry(QtCore.QRect(420, 40, 311, 41))
        font = QtGui.QFont()
        font.setFamily("微軟正黑體")
        font.setPointSize(18)
        font.setBold(True)
        font.setWeight(75)
        self.proj_3.setFont(font)
        self.proj_3.setText("")
        self.proj_3.setAlignment(QtCore.Qt.AlignRight|QtCore.Qt.AlignTrailing|QtCore.Qt.AlignVCenter)
        self.proj_3.setObjectName("proj_3")
        self.pa3_la_3 = QtWidgets.QLabel(Form)
        self.pa3_la_3.setGeometry(QtCore.QRect(570, 340, 21, 41))
        font = QtGui.QFont()
        font.setFamily("微軟正黑體")
        font.setPointSize(18)
        font.setBold(True)
        font.setWeight(75)
        self.pa3_la_3.setFont(font)
        self.pa3_la_3.setObjectName("pa3_la_3")
        self.leader_bonus_4 = QtWidgets.QLineEdit(Form)
        self.leader_bonus_4.setGeometry(QtCore.QRect(610, 660, 121, 41))
        font = QtGui.QFont()
        font.setFamily("微軟正黑體")
        font.setPointSize(18)
        font.setBold(True)
        font.setWeight(75)
        self.leader_bonus_4.setFont(font)
        self.leader_bonus_4.setText("")
        self.leader_bonus_4.setAlignment(QtCore.Qt.AlignRight|QtCore.Qt.AlignTrailing|QtCore.Qt.AlignVCenter)
        self.leader_bonus_4.setReadOnly(True)
        self.leader_bonus_4.setPlaceholderText("")
        self.leader_bonus_4.setObjectName("leader_bonus_4")
        self.bonus4_4 = QtWidgets.QLineEdit(Form)
        self.bonus4_4.setGeometry(QtCore.QRect(610, 860, 121, 41))
        font = QtGui.QFont()
        font.setFamily("微軟正黑體")
        font.setPointSize(18)
        font.setBold(True)
        font.setWeight(75)
        self.bonus4_4.setFont(font)
        self.bonus4_4.setText("")
        self.bonus4_4.setAlignment(QtCore.Qt.AlignRight|QtCore.Qt.AlignTrailing|QtCore.Qt.AlignVCenter)
        self.bonus4_4.setReadOnly(True)
        self.bonus4_4.setPlaceholderText("")
        self.bonus4_4.setObjectName("bonus4_4")
        self.whole_bonus_3 = QtWidgets.QLineEdit(Form)
        self.whole_bonus_3.setGeometry(QtCore.QRect(610, 140, 121, 41))
        font = QtGui.QFont()
        font.setFamily("微軟正黑體")
        font.setPointSize(18)
        font.setBold(True)
        font.setWeight(75)
        self.whole_bonus_3.setFont(font)
        self.whole_bonus_3.setText("")
        self.whole_bonus_3.setAlignment(QtCore.Qt.AlignRight|QtCore.Qt.AlignTrailing|QtCore.Qt.AlignVCenter)
        self.whole_bonus_3.setReadOnly(True)
        self.whole_bonus_3.setPlaceholderText("")
        self.whole_bonus_3.setObjectName("whole_bonus_3")
        self.proj_4 = QtWidgets.QLineEdit(Form)
        self.proj_4.setGeometry(QtCore.QRect(420, 510, 311, 41))
        font = QtGui.QFont()
        font.setFamily("微軟正黑體")
        font.setPointSize(18)
        font.setBold(True)
        font.setWeight(75)
        self.proj_4.setFont(font)
        self.proj_4.setText("")
        self.proj_4.setAlignment(QtCore.Qt.AlignRight|QtCore.Qt.AlignTrailing|QtCore.Qt.AlignVCenter)
        self.proj_4.setObjectName("proj_4")
        self.leader_4 = QtWidgets.QLabel(Form)
        self.leader_4.setGeometry(QtCore.QRect(400, 710, 101, 41))
        font = QtGui.QFont()
        font.setFamily("微軟正黑體")
        font.setPointSize(18)
        font.setBold(True)
        font.setWeight(75)
        self.leader_4.setFont(font)
        self.leader_4.setText("")
        self.leader_4.setAlignment(QtCore.Qt.AlignRight|QtCore.Qt.AlignTrailing|QtCore.Qt.AlignVCenter)
        self.leader_4.setObjectName("leader_4")
        self.bonus1_4 = QtWidgets.QLineEdit(Form)
        self.bonus1_4.setGeometry(QtCore.QRect(610, 710, 121, 41))
        font = QtGui.QFont()
        font.setFamily("微軟正黑體")
        font.setPointSize(18)
        font.setBold(True)
        font.setWeight(75)
        self.bonus1_4.setFont(font)
        self.bonus1_4.setText("")
        self.bonus1_4.setAlignment(QtCore.Qt.AlignRight|QtCore.Qt.AlignTrailing|QtCore.Qt.AlignVCenter)
        self.bonus1_4.setReadOnly(True)
        self.bonus1_4.setPlaceholderText("")
        self.bonus1_4.setObjectName("bonus1_4")
        self.bonus2_4 = QtWidgets.QLineEdit(Form)
        self.bonus2_4.setGeometry(QtCore.QRect(610, 760, 121, 41))
        font = QtGui.QFont()
        font.setFamily("微軟正黑體")
        font.setPointSize(18)
        font.setBold(True)
        font.setWeight(75)
        self.bonus2_4.setFont(font)
        self.bonus2_4.setText("")
        self.bonus2_4.setAlignment(QtCore.Qt.AlignRight|QtCore.Qt.AlignTrailing|QtCore.Qt.AlignVCenter)
        self.bonus2_4.setReadOnly(True)
        self.bonus2_4.setPlaceholderText("")
        self.bonus2_4.setObjectName("bonus2_4")
        self.pa2_la_3 = QtWidgets.QLabel(Form)
        self.pa2_la_3.setGeometry(QtCore.QRect(570, 290, 21, 41))
        font = QtGui.QFont()
        font.setFamily("微軟正黑體")
        font.setPointSize(18)
        font.setBold(True)
        font.setWeight(75)
        self.pa2_la_3.setFont(font)
        self.pa2_la_3.setObjectName("pa2_la_3")
        self.dayline_4 = QtWidgets.QLineEdit(Form)
        self.dayline_4.setGeometry(QtCore.QRect(470, 560, 131, 41))
        font = QtGui.QFont()
        font.setFamily("微軟正黑體")
        font.setPointSize(18)
        font.setBold(True)
        font.setWeight(75)
        self.dayline_4.setFont(font)
        self.dayline_4.setText("")
        self.dayline_4.setAlignment(QtCore.Qt.AlignRight|QtCore.Qt.AlignTrailing|QtCore.Qt.AlignVCenter)
        self.dayline_4.setObjectName("dayline_4")
        self.pa4_la_4 = QtWidgets.QLabel(Form)
        self.pa4_la_4.setGeometry(QtCore.QRect(570, 860, 21, 41))
        font = QtGui.QFont()
        font.setFamily("微軟正黑體")
        font.setPointSize(18)
        font.setBold(True)
        font.setWeight(75)
        self.pa4_la_4.setFont(font)
        self.pa4_la_4.setObjectName("pa4_la_4")
        self.pa2_4 = QtWidgets.QLineEdit(Form)
        self.pa2_4.setGeometry(QtCore.QRect(510, 760, 51, 41))
        font = QtGui.QFont()
        font.setFamily("微軟正黑體")
        font.setPointSize(18)
        font.setBold(True)
        font.setWeight(75)
        self.pa2_4.setFont(font)
        self.pa2_4.setText("")
        self.pa2_4.setAlignment(QtCore.Qt.AlignRight|QtCore.Qt.AlignTrailing|QtCore.Qt.AlignVCenter)
        self.pa2_4.setPlaceholderText("")
        self.pa2_4.setObjectName("pa2_4")
        self.whole_bonus_4 = QtWidgets.QLineEdit(Form)
        self.whole_bonus_4.setGeometry(QtCore.QRect(610, 610, 121, 41))
        font = QtGui.QFont()
        font.setFamily("微軟正黑體")
        font.setPointSize(18)
        font.setBold(True)
        font.setWeight(75)
        self.whole_bonus_4.setFont(font)
        self.whole_bonus_4.setText("")
        self.whole_bonus_4.setAlignment(QtCore.Qt.AlignRight|QtCore.Qt.AlignTrailing|QtCore.Qt.AlignVCenter)
        self.whole_bonus_4.setReadOnly(True)
        self.whole_bonus_4.setPlaceholderText("")
        self.whole_bonus_4.setObjectName("whole_bonus_4")
        self.pa1_3 = QtWidgets.QLineEdit(Form)
        self.pa1_3.setGeometry(QtCore.QRect(510, 240, 51, 41))
        font = QtGui.QFont()
        font.setFamily("微軟正黑體")
        font.setPointSize(18)
        font.setBold(True)
        font.setWeight(75)
        self.pa1_3.setFont(font)
        self.pa1_3.setText("")
        self.pa1_3.setAlignment(QtCore.Qt.AlignRight|QtCore.Qt.AlignTrailing|QtCore.Qt.AlignVCenter)
        self.pa1_3.setPlaceholderText("")
        self.pa1_3.setObjectName("pa1_3")
        self.pa3_la_4 = QtWidgets.QLabel(Form)
        self.pa3_la_4.setGeometry(QtCore.QRect(570, 810, 21, 41))
        font = QtGui.QFont()
        font.setFamily("微軟正黑體")
        font.setPointSize(18)
        font.setBold(True)
        font.setWeight(75)
        self.pa3_la_4.setFont(font)
        self.pa3_la_4.setObjectName("pa3_la_4")
        self.dayline_3 = QtWidgets.QLineEdit(Form)
        self.dayline_3.setGeometry(QtCore.QRect(470, 90, 131, 41))
        font = QtGui.QFont()
        font.setFamily("微軟正黑體")
        font.setPointSize(18)
        font.setBold(True)
        font.setWeight(75)
        self.dayline_3.setFont(font)
        self.dayline_3.setText("")
        self.dayline_3.setAlignment(QtCore.Qt.AlignRight|QtCore.Qt.AlignTrailing|QtCore.Qt.AlignVCenter)
        self.dayline_3.setObjectName("dayline_3")
        self.whole_bonus_la_4 = QtWidgets.QLabel(Form)
        self.whole_bonus_la_4.setGeometry(QtCore.QRect(500, 610, 101, 41))
        font = QtGui.QFont()
        font.setFamily("微軟正黑體")
        font.setPointSize(18)
        font.setBold(True)
        font.setWeight(75)
        self.whole_bonus_la_4.setFont(font)
        self.whole_bonus_la_4.setObjectName("whole_bonus_la_4")
        self.mate2_3 = QtWidgets.QLabel(Form)
        self.mate2_3.setGeometry(QtCore.QRect(400, 340, 101, 41))
        font = QtGui.QFont()
        font.setFamily("微軟正黑體")
        font.setPointSize(18)
        font.setBold(True)
        font.setWeight(75)
        self.mate2_3.setFont(font)
        self.mate2_3.setText("")
        self.mate2_3.setAlignment(QtCore.Qt.AlignRight|QtCore.Qt.AlignTrailing|QtCore.Qt.AlignVCenter)
        self.mate2_3.setObjectName("mate2_3")
        self.pa1_la_3 = QtWidgets.QLabel(Form)
        self.pa1_la_3.setGeometry(QtCore.QRect(570, 240, 21, 41))
        font = QtGui.QFont()
        font.setFamily("微軟正黑體")
        font.setPointSize(18)
        font.setBold(True)
        font.setWeight(75)
        self.pa1_la_3.setFont(font)
        self.pa1_la_3.setObjectName("pa1_la_3")
        self.pa2_3 = QtWidgets.QLineEdit(Form)
        self.pa2_3.setGeometry(QtCore.QRect(510, 290, 51, 41))
        font = QtGui.QFont()
        font.setFamily("微軟正黑體")
        font.setPointSize(18)
        font.setBold(True)
        font.setWeight(75)
        self.pa2_3.setFont(font)
        self.pa2_3.setText("")
        self.pa2_3.setAlignment(QtCore.Qt.AlignRight|QtCore.Qt.AlignTrailing|QtCore.Qt.AlignVCenter)
        self.pa2_3.setPlaceholderText("")
        self.pa2_3.setObjectName("pa2_3")
        self.bonus3_3 = QtWidgets.QLineEdit(Form)
        self.bonus3_3.setGeometry(QtCore.QRect(610, 340, 121, 41))
        font = QtGui.QFont()
        font.setFamily("微軟正黑體")
        font.setPointSize(18)
        font.setBold(True)
        font.setWeight(75)
        self.bonus3_3.setFont(font)
        self.bonus3_3.setText("")
        self.bonus3_3.setAlignment(QtCore.Qt.AlignRight|QtCore.Qt.AlignTrailing|QtCore.Qt.AlignVCenter)
        self.bonus3_3.setReadOnly(True)
        self.bonus3_3.setPlaceholderText("")
        self.bonus3_3.setObjectName("bonus3_3")
        self.pa4_4 = QtWidgets.QLineEdit(Form)
        self.pa4_4.setGeometry(QtCore.QRect(510, 860, 51, 41))
        font = QtGui.QFont()
        font.setFamily("微軟正黑體")
        font.setPointSize(18)
        font.setBold(True)
        font.setWeight(75)
        self.pa4_4.setFont(font)
        self.pa4_4.setText("")
        self.pa4_4.setAlignment(QtCore.Qt.AlignRight|QtCore.Qt.AlignTrailing|QtCore.Qt.AlignVCenter)
        self.pa4_4.setPlaceholderText("")
        self.pa4_4.setObjectName("pa4_4")
        self.mate2_4 = QtWidgets.QLabel(Form)
        self.mate2_4.setGeometry(QtCore.QRect(400, 810, 101, 41))
        font = QtGui.QFont()
        font.setFamily("微軟正黑體")
        font.setPointSize(18)
        font.setBold(True)
        font.setWeight(75)
        self.mate2_4.setFont(font)
        self.mate2_4.setText("")
        self.mate2_4.setAlignment(QtCore.Qt.AlignRight|QtCore.Qt.AlignTrailing|QtCore.Qt.AlignVCenter)
        self.mate2_4.setObjectName("mate2_4")
        self.pa1_la_4 = QtWidgets.QLabel(Form)
        self.pa1_la_4.setGeometry(QtCore.QRect(570, 710, 21, 41))
        font = QtGui.QFont()
        font.setFamily("微軟正黑體")
        font.setPointSize(18)
        font.setBold(True)
        font.setWeight(75)
        self.pa1_la_4.setFont(font)
        self.pa1_la_4.setObjectName("pa1_la_4")
        self.pa3_4 = QtWidgets.QLineEdit(Form)
        self.pa3_4.setGeometry(QtCore.QRect(510, 810, 51, 41))
        font = QtGui.QFont()
        font.setFamily("微軟正黑體")
        font.setPointSize(18)
        font.setBold(True)
        font.setWeight(75)
        self.pa3_4.setFont(font)
        self.pa3_4.setText("")
        self.pa3_4.setAlignment(QtCore.Qt.AlignRight|QtCore.Qt.AlignTrailing|QtCore.Qt.AlignVCenter)
        self.pa3_4.setPlaceholderText("")
        self.pa3_4.setObjectName("pa3_4")
        self.bonus4_3 = QtWidgets.QLineEdit(Form)
        self.bonus4_3.setGeometry(QtCore.QRect(610, 390, 121, 41))
        font = QtGui.QFont()
        font.setFamily("微軟正黑體")
        font.setPointSize(18)
        font.setBold(True)
        font.setWeight(75)
        self.bonus4_3.setFont(font)
        self.bonus4_3.setText("")
        self.bonus4_3.setAlignment(QtCore.Qt.AlignRight|QtCore.Qt.AlignTrailing|QtCore.Qt.AlignVCenter)
        self.bonus4_3.setReadOnly(True)
        self.bonus4_3.setPlaceholderText("")
        self.bonus4_3.setObjectName("bonus4_3")
        self.leader_3 = QtWidgets.QLabel(Form)
        self.leader_3.setGeometry(QtCore.QRect(400, 240, 101, 41))
        font = QtGui.QFont()
        font.setFamily("微軟正黑體")
        font.setPointSize(18)
        font.setBold(True)
        font.setWeight(75)
        self.leader_3.setFont(font)
        self.leader_3.setText("")
        self.leader_3.setAlignment(QtCore.Qt.AlignRight|QtCore.Qt.AlignTrailing|QtCore.Qt.AlignVCenter)
        self.leader_3.setObjectName("leader_3")
        self.pa4_3 = QtWidgets.QLineEdit(Form)
        self.pa4_3.setGeometry(QtCore.QRect(510, 390, 51, 41))
        font = QtGui.QFont()
        font.setFamily("微軟正黑體")
        font.setPointSize(18)
        font.setBold(True)
        font.setWeight(75)
        self.pa4_3.setFont(font)
        self.pa4_3.setText("")
        self.pa4_3.setAlignment(QtCore.Qt.AlignRight|QtCore.Qt.AlignTrailing|QtCore.Qt.AlignVCenter)
        self.pa4_3.setPlaceholderText("")
        self.pa4_3.setObjectName("pa4_3")
        self.leader_bonus_la_4 = QtWidgets.QLabel(Form)
        self.leader_bonus_la_4.setGeometry(QtCore.QRect(500, 660, 101, 41))
        font = QtGui.QFont()
        font.setFamily("微軟正黑體")
        font.setPointSize(18)
        font.setBold(True)
        font.setWeight(75)
        self.leader_bonus_la_4.setFont(font)
        self.leader_bonus_la_4.setObjectName("leader_bonus_la_4")
        self.pa2_la_4 = QtWidgets.QLabel(Form)
        self.pa2_la_4.setGeometry(QtCore.QRect(570, 760, 21, 41))
        font = QtGui.QFont()
        font.setFamily("微軟正黑體")
        font.setPointSize(18)
        font.setBold(True)
        font.setWeight(75)
        self.pa2_la_4.setFont(font)
        self.pa2_la_4.setObjectName("pa2_la_4")
        self.leader_bonus_la_3 = QtWidgets.QLabel(Form)
        self.leader_bonus_la_3.setGeometry(QtCore.QRect(500, 190, 101, 41))
        font = QtGui.QFont()
        font.setFamily("微軟正黑體")
        font.setPointSize(18)
        font.setBold(True)
        font.setWeight(75)
        self.leader_bonus_la_3.setFont(font)
        self.leader_bonus_la_3.setObjectName("leader_bonus_la_3")
        self.bonus2_6 = QtWidgets.QLineEdit(Form)
        self.bonus2_6.setGeometry(QtCore.QRect(1010, 760, 121, 41))
        font = QtGui.QFont()
        font.setFamily("微軟正黑體")
        font.setPointSize(18)
        font.setBold(True)
        font.setWeight(75)
        self.bonus2_6.setFont(font)
        self.bonus2_6.setText("")
        self.bonus2_6.setAlignment(QtCore.Qt.AlignRight|QtCore.Qt.AlignTrailing|QtCore.Qt.AlignVCenter)
        self.bonus2_6.setReadOnly(True)
        self.bonus2_6.setPlaceholderText("")
        self.bonus2_6.setObjectName("bonus2_6")
        self.pa2_5 = QtWidgets.QLineEdit(Form)
        self.pa2_5.setGeometry(QtCore.QRect(910, 290, 51, 41))
        font = QtGui.QFont()
        font.setFamily("微軟正黑體")
        font.setPointSize(18)
        font.setBold(True)
        font.setWeight(75)
        self.pa2_5.setFont(font)
        self.pa2_5.setText("")
        self.pa2_5.setAlignment(QtCore.Qt.AlignRight|QtCore.Qt.AlignTrailing|QtCore.Qt.AlignVCenter)
        self.pa2_5.setPlaceholderText("")
        self.pa2_5.setObjectName("pa2_5")
        self.bonus1_6 = QtWidgets.QLineEdit(Form)
        self.bonus1_6.setGeometry(QtCore.QRect(1010, 710, 121, 41))
        font = QtGui.QFont()
        font.setFamily("微軟正黑體")
        font.setPointSize(18)
        font.setBold(True)
        font.setWeight(75)
        self.bonus1_6.setFont(font)
        self.bonus1_6.setText("")
        self.bonus1_6.setAlignment(QtCore.Qt.AlignRight|QtCore.Qt.AlignTrailing|QtCore.Qt.AlignVCenter)
        self.bonus1_6.setReadOnly(True)
        self.bonus1_6.setPlaceholderText("")
        self.bonus1_6.setObjectName("bonus1_6")
        self.pa1_la_5 = QtWidgets.QLabel(Form)
        self.pa1_la_5.setGeometry(QtCore.QRect(970, 240, 21, 41))
        font = QtGui.QFont()
        font.setFamily("微軟正黑體")
        font.setPointSize(18)
        font.setBold(True)
        font.setWeight(75)
        self.pa1_la_5.setFont(font)
        self.pa1_la_5.setObjectName("pa1_la_5")
        self.pa4_6 = QtWidgets.QLineEdit(Form)
        self.pa4_6.setGeometry(QtCore.QRect(910, 860, 51, 41))
        font = QtGui.QFont()
        font.setFamily("微軟正黑體")
        font.setPointSize(18)
        font.setBold(True)
        font.setWeight(75)
        self.pa4_6.setFont(font)
        self.pa4_6.setText("")
        self.pa4_6.setAlignment(QtCore.Qt.AlignRight|QtCore.Qt.AlignTrailing|QtCore.Qt.AlignVCenter)
        self.pa4_6.setPlaceholderText("")
        self.pa4_6.setObjectName("pa4_6")
        self.mate3_6 = QtWidgets.QLabel(Form)
        self.mate3_6.setGeometry(QtCore.QRect(800, 860, 101, 41))
        font = QtGui.QFont()
        font.setFamily("微軟正黑體")
        font.setPointSize(18)
        font.setBold(True)
        font.setWeight(75)
        self.mate3_6.setFont(font)
        self.mate3_6.setText("")
        self.mate3_6.setAlignment(QtCore.Qt.AlignRight|QtCore.Qt.AlignTrailing|QtCore.Qt.AlignVCenter)
        self.mate3_6.setObjectName("mate3_6")
        self.mate1_6 = QtWidgets.QLabel(Form)
        self.mate1_6.setGeometry(QtCore.QRect(800, 760, 101, 41))
        font = QtGui.QFont()
        font.setFamily("微軟正黑體")
        font.setPointSize(18)
        font.setBold(True)
        font.setWeight(75)
        self.mate1_6.setFont(font)
        self.mate1_6.setText("")
        self.mate1_6.setAlignment(QtCore.Qt.AlignRight|QtCore.Qt.AlignTrailing|QtCore.Qt.AlignVCenter)
        self.mate1_6.setObjectName("mate1_6")
        self.pa3_5 = QtWidgets.QLineEdit(Form)
        self.pa3_5.setGeometry(QtCore.QRect(910, 340, 51, 41))
        font = QtGui.QFont()
        font.setFamily("微軟正黑體")
        font.setPointSize(18)
        font.setBold(True)
        font.setWeight(75)
        self.pa3_5.setFont(font)
        self.pa3_5.setText("")
        self.pa3_5.setAlignment(QtCore.Qt.AlignRight|QtCore.Qt.AlignTrailing|QtCore.Qt.AlignVCenter)
        self.pa3_5.setPlaceholderText("")
        self.pa3_5.setObjectName("pa3_5")
        self.dayline_5 = QtWidgets.QLineEdit(Form)
        self.dayline_5.setGeometry(QtCore.QRect(870, 90, 131, 41))
        font = QtGui.QFont()
        font.setFamily("微軟正黑體")
        font.setPointSize(18)
        font.setBold(True)
        font.setWeight(75)
        self.dayline_5.setFont(font)
        self.dayline_5.setText("")
        self.dayline_5.setAlignment(QtCore.Qt.AlignRight|QtCore.Qt.AlignTrailing|QtCore.Qt.AlignVCenter)
        self.dayline_5.setObjectName("dayline_5")
        self.mate2_5 = QtWidgets.QLabel(Form)
        self.mate2_5.setGeometry(QtCore.QRect(800, 340, 101, 41))
        font = QtGui.QFont()
        font.setFamily("微軟正黑體")
        font.setPointSize(18)
        font.setBold(True)
        font.setWeight(75)
        self.mate2_5.setFont(font)
        self.mate2_5.setText("")
        self.mate2_5.setAlignment(QtCore.Qt.AlignRight|QtCore.Qt.AlignTrailing|QtCore.Qt.AlignVCenter)
        self.mate2_5.setObjectName("mate2_5")
        self.case_money_6 = QtWidgets.QLineEdit(Form)
        self.case_money_6.setGeometry(QtCore.QRect(1010, 560, 121, 41))
        font = QtGui.QFont()
        font.setFamily("微軟正黑體")
        font.setPointSize(18)
        font.setBold(True)
        font.setWeight(75)
        self.case_money_6.setFont(font)
        self.case_money_6.setText("")
        self.case_money_6.setAlignment(QtCore.Qt.AlignRight|QtCore.Qt.AlignTrailing|QtCore.Qt.AlignVCenter)
        self.case_money_6.setObjectName("case_money_6")
        self.mate1_5 = QtWidgets.QLabel(Form)
        self.mate1_5.setGeometry(QtCore.QRect(800, 290, 101, 41))
        font = QtGui.QFont()
        font.setFamily("微軟正黑體")
        font.setPointSize(18)
        font.setBold(True)
        font.setWeight(75)
        self.mate1_5.setFont(font)
        self.mate1_5.setText("")
        self.mate1_5.setAlignment(QtCore.Qt.AlignRight|QtCore.Qt.AlignTrailing|QtCore.Qt.AlignVCenter)
        self.mate1_5.setObjectName("mate1_5")
        self.pa1_6 = QtWidgets.QLineEdit(Form)
        self.pa1_6.setGeometry(QtCore.QRect(910, 710, 51, 41))
        font = QtGui.QFont()
        font.setFamily("微軟正黑體")
        font.setPointSize(18)
        font.setBold(True)
        font.setWeight(75)
        self.pa1_6.setFont(font)
        self.pa1_6.setText("")
        self.pa1_6.setAlignment(QtCore.Qt.AlignRight|QtCore.Qt.AlignTrailing|QtCore.Qt.AlignVCenter)
        self.pa1_6.setPlaceholderText("")
        self.pa1_6.setObjectName("pa1_6")
        self.pa4_la_5 = QtWidgets.QLabel(Form)
        self.pa4_la_5.setGeometry(QtCore.QRect(970, 390, 21, 41))
        font = QtGui.QFont()
        font.setFamily("微軟正黑體")
        font.setPointSize(18)
        font.setBold(True)
        font.setWeight(75)
        self.pa4_la_5.setFont(font)
        self.pa4_la_5.setObjectName("pa4_la_5")
        self.proj_5 = QtWidgets.QLineEdit(Form)
        self.proj_5.setGeometry(QtCore.QRect(820, 40, 311, 41))
        font = QtGui.QFont()
        font.setFamily("微軟正黑體")
        font.setPointSize(18)
        font.setBold(True)
        font.setWeight(75)
        self.proj_5.setFont(font)
        self.proj_5.setText("")
        self.proj_5.setAlignment(QtCore.Qt.AlignRight|QtCore.Qt.AlignTrailing|QtCore.Qt.AlignVCenter)
        self.proj_5.setObjectName("proj_5")
        self.pa3_6 = QtWidgets.QLineEdit(Form)
        self.pa3_6.setGeometry(QtCore.QRect(910, 810, 51, 41))
        font = QtGui.QFont()
        font.setFamily("微軟正黑體")
        font.setPointSize(18)
        font.setBold(True)
        font.setWeight(75)
        self.pa3_6.setFont(font)
        self.pa3_6.setText("")
        self.pa3_6.setAlignment(QtCore.Qt.AlignRight|QtCore.Qt.AlignTrailing|QtCore.Qt.AlignVCenter)
        self.pa3_6.setPlaceholderText("")
        self.pa3_6.setObjectName("pa3_6")
        self.mate2_6 = QtWidgets.QLabel(Form)
        self.mate2_6.setGeometry(QtCore.QRect(800, 810, 101, 41))
        font = QtGui.QFont()
        font.setFamily("微軟正黑體")
        font.setPointSize(18)
        font.setBold(True)
        font.setWeight(75)
        self.mate2_6.setFont(font)
        self.mate2_6.setText("")
        self.mate2_6.setAlignment(QtCore.Qt.AlignRight|QtCore.Qt.AlignTrailing|QtCore.Qt.AlignVCenter)
        self.mate2_6.setObjectName("mate2_6")
        self.whole_bonus_la_6 = QtWidgets.QLabel(Form)
        self.whole_bonus_la_6.setGeometry(QtCore.QRect(900, 610, 101, 41))
        font = QtGui.QFont()
        font.setFamily("微軟正黑體")
        font.setPointSize(18)
        font.setBold(True)
        font.setWeight(75)
        self.whole_bonus_la_6.setFont(font)
        self.whole_bonus_la_6.setObjectName("whole_bonus_la_6")
        self.pa4_5 = QtWidgets.QLineEdit(Form)
        self.pa4_5.setGeometry(QtCore.QRect(910, 390, 51, 41))
        font = QtGui.QFont()
        font.setFamily("微軟正黑體")
        font.setPointSize(18)
        font.setBold(True)
        font.setWeight(75)
        self.pa4_5.setFont(font)
        self.pa4_5.setText("")
        self.pa4_5.setAlignment(QtCore.Qt.AlignRight|QtCore.Qt.AlignTrailing|QtCore.Qt.AlignVCenter)
        self.pa4_5.setPlaceholderText("")
        self.pa4_5.setObjectName("pa4_5")
        self.bonus4_5 = QtWidgets.QLineEdit(Form)
        self.bonus4_5.setGeometry(QtCore.QRect(1010, 390, 121, 41))
        font = QtGui.QFont()
        font.setFamily("微軟正黑體")
        font.setPointSize(18)
        font.setBold(True)
        font.setWeight(75)
        self.bonus4_5.setFont(font)
        self.bonus4_5.setText("")
        self.bonus4_5.setAlignment(QtCore.Qt.AlignRight|QtCore.Qt.AlignTrailing|QtCore.Qt.AlignVCenter)
        self.bonus4_5.setReadOnly(True)
        self.bonus4_5.setPlaceholderText("")
        self.bonus4_5.setObjectName("bonus4_5")
        self.pa3_la_5 = QtWidgets.QLabel(Form)
        self.pa3_la_5.setGeometry(QtCore.QRect(970, 340, 21, 41))
        font = QtGui.QFont()
        font.setFamily("微軟正黑體")
        font.setPointSize(18)
        font.setBold(True)
        font.setWeight(75)
        self.pa3_la_5.setFont(font)
        self.pa3_la_5.setObjectName("pa3_la_5")
        self.bonus3_6 = QtWidgets.QLineEdit(Form)
        self.bonus3_6.setGeometry(QtCore.QRect(1010, 810, 121, 41))
        font = QtGui.QFont()
        font.setFamily("微軟正黑體")
        font.setPointSize(18)
        font.setBold(True)
        font.setWeight(75)
        self.bonus3_6.setFont(font)
        self.bonus3_6.setText("")
        self.bonus3_6.setAlignment(QtCore.Qt.AlignRight|QtCore.Qt.AlignTrailing|QtCore.Qt.AlignVCenter)
        self.bonus3_6.setReadOnly(True)
        self.bonus3_6.setPlaceholderText("")
        self.bonus3_6.setObjectName("bonus3_6")
        self.bonus1_5 = QtWidgets.QLineEdit(Form)
        self.bonus1_5.setGeometry(QtCore.QRect(1010, 240, 121, 41))
        font = QtGui.QFont()
        font.setFamily("微軟正黑體")
        font.setPointSize(18)
        font.setBold(True)
        font.setWeight(75)
        self.bonus1_5.setFont(font)
        self.bonus1_5.setText("")
        self.bonus1_5.setAlignment(QtCore.Qt.AlignRight|QtCore.Qt.AlignTrailing|QtCore.Qt.AlignVCenter)
        self.bonus1_5.setReadOnly(True)
        self.bonus1_5.setPlaceholderText("")
        self.bonus1_5.setObjectName("bonus1_5")
        self.whole_bonus_la_5 = QtWidgets.QLabel(Form)
        self.whole_bonus_la_5.setGeometry(QtCore.QRect(900, 140, 101, 41))
        font = QtGui.QFont()
        font.setFamily("微軟正黑體")
        font.setPointSize(18)
        font.setBold(True)
        font.setWeight(75)
        self.whole_bonus_la_5.setFont(font)
        self.whole_bonus_la_5.setObjectName("whole_bonus_la_5")
        self.bonus4_6 = QtWidgets.QLineEdit(Form)
        self.bonus4_6.setGeometry(QtCore.QRect(1010, 860, 121, 41))
        font = QtGui.QFont()
        font.setFamily("微軟正黑體")
        font.setPointSize(18)
        font.setBold(True)
        font.setWeight(75)
        self.bonus4_6.setFont(font)
        self.bonus4_6.setText("")
        self.bonus4_6.setAlignment(QtCore.Qt.AlignRight|QtCore.Qt.AlignTrailing|QtCore.Qt.AlignVCenter)
        self.bonus4_6.setReadOnly(True)
        self.bonus4_6.setPlaceholderText("")
        self.bonus4_6.setObjectName("bonus4_6")
        self.leader_bonus_5 = QtWidgets.QLineEdit(Form)
        self.leader_bonus_5.setGeometry(QtCore.QRect(1010, 190, 121, 41))
        font = QtGui.QFont()
        font.setFamily("微軟正黑體")
        font.setPointSize(18)
        font.setBold(True)
        font.setWeight(75)
        self.leader_bonus_5.setFont(font)
        self.leader_bonus_5.setText("")
        self.leader_bonus_5.setAlignment(QtCore.Qt.AlignRight|QtCore.Qt.AlignTrailing|QtCore.Qt.AlignVCenter)
        self.leader_bonus_5.setReadOnly(True)
        self.leader_bonus_5.setPlaceholderText("")
        self.leader_bonus_5.setObjectName("leader_bonus_5")
        self.bonus2_5 = QtWidgets.QLineEdit(Form)
        self.bonus2_5.setGeometry(QtCore.QRect(1010, 290, 121, 41))
        font = QtGui.QFont()
        font.setFamily("微軟正黑體")
        font.setPointSize(18)
        font.setBold(True)
        font.setWeight(75)
        self.bonus2_5.setFont(font)
        self.bonus2_5.setText("")
        self.bonus2_5.setAlignment(QtCore.Qt.AlignRight|QtCore.Qt.AlignTrailing|QtCore.Qt.AlignVCenter)
        self.bonus2_5.setReadOnly(True)
        self.bonus2_5.setPlaceholderText("")
        self.bonus2_5.setObjectName("bonus2_5")
        self.pa3_la_6 = QtWidgets.QLabel(Form)
        self.pa3_la_6.setGeometry(QtCore.QRect(970, 810, 21, 41))
        font = QtGui.QFont()
        font.setFamily("微軟正黑體")
        font.setPointSize(18)
        font.setBold(True)
        font.setWeight(75)
        self.pa3_la_6.setFont(font)
        self.pa3_la_6.setObjectName("pa3_la_6")
        self.pa2_la_6 = QtWidgets.QLabel(Form)
        self.pa2_la_6.setGeometry(QtCore.QRect(970, 760, 21, 41))
        font = QtGui.QFont()
        font.setFamily("微軟正黑體")
        font.setPointSize(18)
        font.setBold(True)
        font.setWeight(75)
        self.pa2_la_6.setFont(font)
        self.pa2_la_6.setObjectName("pa2_la_6")
        self.leader_bonus_la_6 = QtWidgets.QLabel(Form)
        self.leader_bonus_la_6.setGeometry(QtCore.QRect(900, 660, 101, 41))
        font = QtGui.QFont()
        font.setFamily("微軟正黑體")
        font.setPointSize(18)
        font.setBold(True)
        font.setWeight(75)
        self.leader_bonus_la_6.setFont(font)
        self.leader_bonus_la_6.setObjectName("leader_bonus_la_6")
        self.pa1_la_6 = QtWidgets.QLabel(Form)
        self.pa1_la_6.setGeometry(QtCore.QRect(970, 710, 21, 41))
        font = QtGui.QFont()
        font.setFamily("微軟正黑體")
        font.setPointSize(18)
        font.setBold(True)
        font.setWeight(75)
        self.pa1_la_6.setFont(font)
        self.pa1_la_6.setObjectName("pa1_la_6")
        self.whole_bonus_5 = QtWidgets.QLineEdit(Form)
        self.whole_bonus_5.setGeometry(QtCore.QRect(1010, 140, 121, 41))
        font = QtGui.QFont()
        font.setFamily("微軟正黑體")
        font.setPointSize(18)
        font.setBold(True)
        font.setWeight(75)
        self.whole_bonus_5.setFont(font)
        self.whole_bonus_5.setText("")
        self.whole_bonus_5.setAlignment(QtCore.Qt.AlignRight|QtCore.Qt.AlignTrailing|QtCore.Qt.AlignVCenter)
        self.whole_bonus_5.setReadOnly(True)
        self.whole_bonus_5.setPlaceholderText("")
        self.whole_bonus_5.setObjectName("whole_bonus_5")
        self.bonus3_5 = QtWidgets.QLineEdit(Form)
        self.bonus3_5.setGeometry(QtCore.QRect(1010, 340, 121, 41))
        font = QtGui.QFont()
        font.setFamily("微軟正黑體")
        font.setPointSize(18)
        font.setBold(True)
        font.setWeight(75)
        self.bonus3_5.setFont(font)
        self.bonus3_5.setText("")
        self.bonus3_5.setAlignment(QtCore.Qt.AlignRight|QtCore.Qt.AlignTrailing|QtCore.Qt.AlignVCenter)
        self.bonus3_5.setReadOnly(True)
        self.bonus3_5.setPlaceholderText("")
        self.bonus3_5.setObjectName("bonus3_5")
        self.pa1_5 = QtWidgets.QLineEdit(Form)
        self.pa1_5.setGeometry(QtCore.QRect(910, 240, 51, 41))
        font = QtGui.QFont()
        font.setFamily("微軟正黑體")
        font.setPointSize(18)
        font.setBold(True)
        font.setWeight(75)
        self.pa1_5.setFont(font)
        self.pa1_5.setText("")
        self.pa1_5.setAlignment(QtCore.Qt.AlignRight|QtCore.Qt.AlignTrailing|QtCore.Qt.AlignVCenter)
        self.pa1_5.setPlaceholderText("")
        self.pa1_5.setObjectName("pa1_5")
        self.leader_bonus_la_5 = QtWidgets.QLabel(Form)
        self.leader_bonus_la_5.setGeometry(QtCore.QRect(900, 190, 101, 41))
        font = QtGui.QFont()
        font.setFamily("微軟正黑體")
        font.setPointSize(18)
        font.setBold(True)
        font.setWeight(75)
        self.leader_bonus_la_5.setFont(font)
        self.leader_bonus_la_5.setObjectName("leader_bonus_la_5")
        self.proj_6 = QtWidgets.QLineEdit(Form)
        self.proj_6.setGeometry(QtCore.QRect(820, 510, 311, 41))
        font = QtGui.QFont()
        font.setFamily("微軟正黑體")
        font.setPointSize(18)
        font.setBold(True)
        font.setWeight(75)
        self.proj_6.setFont(font)
        self.proj_6.setText("")
        self.proj_6.setAlignment(QtCore.Qt.AlignRight|QtCore.Qt.AlignTrailing|QtCore.Qt.AlignVCenter)
        self.proj_6.setObjectName("proj_6")
        self.case_money_5 = QtWidgets.QLineEdit(Form)
        self.case_money_5.setGeometry(QtCore.QRect(1010, 90, 121, 41))
        font = QtGui.QFont()
        font.setFamily("微軟正黑體")
        font.setPointSize(18)
        font.setBold(True)
        font.setWeight(75)
        self.case_money_5.setFont(font)
        self.case_money_5.setText("")
        self.case_money_5.setAlignment(QtCore.Qt.AlignRight|QtCore.Qt.AlignTrailing|QtCore.Qt.AlignVCenter)
        self.case_money_5.setObjectName("case_money_5")
        self.mate3_5 = QtWidgets.QLabel(Form)
        self.mate3_5.setGeometry(QtCore.QRect(800, 390, 101, 41))
        font = QtGui.QFont()
        font.setFamily("微軟正黑體")
        font.setPointSize(18)
        font.setBold(True)
        font.setWeight(75)
        self.mate3_5.setFont(font)
        self.mate3_5.setText("")
        self.mate3_5.setAlignment(QtCore.Qt.AlignRight|QtCore.Qt.AlignTrailing|QtCore.Qt.AlignVCenter)
        self.mate3_5.setObjectName("mate3_5")
        self.dayline_6 = QtWidgets.QLineEdit(Form)
        self.dayline_6.setGeometry(QtCore.QRect(870, 560, 131, 41))
        font = QtGui.QFont()
        font.setFamily("微軟正黑體")
        font.setPointSize(18)
        font.setBold(True)
        font.setWeight(75)
        self.dayline_6.setFont(font)
        self.dayline_6.setText("")
        self.dayline_6.setAlignment(QtCore.Qt.AlignRight|QtCore.Qt.AlignTrailing|QtCore.Qt.AlignVCenter)
        self.dayline_6.setObjectName("dayline_6")
        self.whole_bonus_6 = QtWidgets.QLineEdit(Form)
        self.whole_bonus_6.setGeometry(QtCore.QRect(1010, 610, 121, 41))
        font = QtGui.QFont()
        font.setFamily("微軟正黑體")
        font.setPointSize(18)
        font.setBold(True)
        font.setWeight(75)
        self.whole_bonus_6.setFont(font)
        self.whole_bonus_6.setText("")
        self.whole_bonus_6.setAlignment(QtCore.Qt.AlignRight|QtCore.Qt.AlignTrailing|QtCore.Qt.AlignVCenter)
        self.whole_bonus_6.setReadOnly(True)
        self.whole_bonus_6.setPlaceholderText("")
        self.whole_bonus_6.setObjectName("whole_bonus_6")
        self.leader_5 = QtWidgets.QLabel(Form)
        self.leader_5.setGeometry(QtCore.QRect(800, 240, 101, 41))
        font = QtGui.QFont()
        font.setFamily("微軟正黑體")
        font.setPointSize(18)
        font.setBold(True)
        font.setWeight(75)
        self.leader_5.setFont(font)
        self.leader_5.setText("")
        self.leader_5.setAlignment(QtCore.Qt.AlignRight|QtCore.Qt.AlignTrailing|QtCore.Qt.AlignVCenter)
        self.leader_5.setObjectName("leader_5")
        self.leader_bonus_6 = QtWidgets.QLineEdit(Form)
        self.leader_bonus_6.setGeometry(QtCore.QRect(1010, 660, 121, 41))
        font = QtGui.QFont()
        font.setFamily("微軟正黑體")
        font.setPointSize(18)
        font.setBold(True)
        font.setWeight(75)
        self.leader_bonus_6.setFont(font)
        self.leader_bonus_6.setText("")
        self.leader_bonus_6.setAlignment(QtCore.Qt.AlignRight|QtCore.Qt.AlignTrailing|QtCore.Qt.AlignVCenter)
        self.leader_bonus_6.setReadOnly(True)
        self.leader_bonus_6.setPlaceholderText("")
        self.leader_bonus_6.setObjectName("leader_bonus_6")
        self.pa2_6 = QtWidgets.QLineEdit(Form)
        self.pa2_6.setGeometry(QtCore.QRect(910, 760, 51, 41))
        font = QtGui.QFont()
        font.setFamily("微軟正黑體")
        font.setPointSize(18)
        font.setBold(True)
        font.setWeight(75)
        self.pa2_6.setFont(font)
        self.pa2_6.setText("")
        self.pa2_6.setAlignment(QtCore.Qt.AlignRight|QtCore.Qt.AlignTrailing|QtCore.Qt.AlignVCenter)
        self.pa2_6.setPlaceholderText("")
        self.pa2_6.setObjectName("pa2_6")
        self.pa2_la_5 = QtWidgets.QLabel(Form)
        self.pa2_la_5.setGeometry(QtCore.QRect(970, 290, 21, 41))
        font = QtGui.QFont()
        font.setFamily("微軟正黑體")
        font.setPointSize(18)
        font.setBold(True)
        font.setWeight(75)
        self.pa2_la_5.setFont(font)
        self.pa2_la_5.setObjectName("pa2_la_5")
        self.leader_6 = QtWidgets.QLabel(Form)
        self.leader_6.setGeometry(QtCore.QRect(800, 710, 101, 41))
        font = QtGui.QFont()
        font.setFamily("微軟正黑體")
        font.setPointSize(18)
        font.setBold(True)
        font.setWeight(75)
        self.leader_6.setFont(font)
        self.leader_6.setText("")
        self.leader_6.setAlignment(QtCore.Qt.AlignRight|QtCore.Qt.AlignTrailing|QtCore.Qt.AlignVCenter)
        self.leader_6.setObjectName("leader_6")
        self.pa4_la_6 = QtWidgets.QLabel(Form)
        self.pa4_la_6.setGeometry(QtCore.QRect(970, 860, 21, 41))
        font = QtGui.QFont()
        font.setFamily("微軟正黑體")
        font.setPointSize(18)
        font.setBold(True)
        font.setWeight(75)
        self.pa4_la_6.setFont(font)
        self.pa4_la_6.setObjectName("pa4_la_6")
        self.line = QtWidgets.QFrame(Form)
        self.line.setGeometry(QtCore.QRect(40, 460, 1111, 20))
        self.line.setFrameShadow(QtWidgets.QFrame.Plain)
        self.line.setLineWidth(2)
        self.line.setFrameShape(QtWidgets.QFrame.HLine)
        self.line.setObjectName("line")
        self.line_2 = QtWidgets.QFrame(Form)
        self.line_2.setGeometry(QtCore.QRect(1180, 140, 20, 661))
        self.line_2.setFrameShadow(QtWidgets.QFrame.Plain)
        self.line_2.setLineWidth(4)
        self.line_2.setFrameShape(QtWidgets.QFrame.VLine)
        self.line_2.setObjectName("line_2")
        self.line_3 = QtWidgets.QFrame(Form)
        self.line_3.setGeometry(QtCore.QRect(370, 80, 20, 341))
        self.line_3.setFrameShadow(QtWidgets.QFrame.Plain)
        self.line_3.setLineWidth(2)
        self.line_3.setFrameShape(QtWidgets.QFrame.VLine)
        self.line_3.setObjectName("line_3")
        self.line_4 = QtWidgets.QFrame(Form)
        self.line_4.setGeometry(QtCore.QRect(370, 530, 20, 341))
        self.line_4.setFrameShadow(QtWidgets.QFrame.Plain)
        self.line_4.setLineWidth(2)
        self.line_4.setFrameShape(QtWidgets.QFrame.VLine)
        self.line_4.setObjectName("line_4")
        self.line_5 = QtWidgets.QFrame(Form)
        self.line_5.setGeometry(QtCore.QRect(770, 80, 20, 341))
        self.line_5.setFrameShadow(QtWidgets.QFrame.Plain)
        self.line_5.setLineWidth(2)
        self.line_5.setFrameShape(QtWidgets.QFrame.VLine)
        self.line_5.setObjectName("line_5")
        self.line_6 = QtWidgets.QFrame(Form)
        self.line_6.setGeometry(QtCore.QRect(770, 520, 20, 341))
        self.line_6.setFrameShadow(QtWidgets.QFrame.Plain)
        self.line_6.setLineWidth(2)
        self.line_6.setFrameShape(QtWidgets.QFrame.VLine)
        self.line_6.setObjectName("line_6")
        self.leader_name = QtWidgets.QLineEdit(Form)
        self.leader_name.setGeometry(QtCore.QRect(1250, 60, 141, 51))
        font = QtGui.QFont()
        font.setFamily("微軟正黑體")
        font.setPointSize(24)
        font.setBold(True)
        font.setWeight(75)
        self.leader_name.setFont(font)
        self.leader_name.setText("")
        self.leader_name.setAlignment(QtCore.Qt.AlignCenter)
        self.leader_name.setObjectName("leader_name")
        self.leader_whole_bonus = QtWidgets.QLineEdit(Form)
        self.leader_whole_bonus.setGeometry(QtCore.QRect(1250, 120, 141, 51))
        font = QtGui.QFont()
        font.setFamily("微軟正黑體")
        font.setPointSize(24)
        font.setBold(True)
        font.setWeight(75)
        self.leader_whole_bonus.setFont(font)
        self.leader_whole_bonus.setAlignment(QtCore.Qt.AlignCenter)
        self.leader_whole_bonus.setReadOnly(True)
        self.leader_whole_bonus.setPlaceholderText("")
        self.leader_whole_bonus.setObjectName("leader_whole_bonus")
        self.mate1_whole_bonus = QtWidgets.QLineEdit(Form)
        self.mate1_whole_bonus.setGeometry(QtCore.QRect(1250, 290, 141, 51))
        font = QtGui.QFont()
        font.setFamily("微軟正黑體")
        font.setPointSize(24)
        font.setBold(True)
        font.setWeight(75)
        self.mate1_whole_bonus.setFont(font)
        self.mate1_whole_bonus.setAlignment(QtCore.Qt.AlignCenter)
        self.mate1_whole_bonus.setReadOnly(True)
        self.mate1_whole_bonus.setPlaceholderText("")
        self.mate1_whole_bonus.setObjectName("mate1_whole_bonus")
        self.mate1_name = QtWidgets.QLineEdit(Form)
        self.mate1_name.setGeometry(QtCore.QRect(1250, 230, 141, 51))
        font = QtGui.QFont()
        font.setFamily("微軟正黑體")
        font.setPointSize(24)
        font.setBold(True)
        font.setWeight(75)
        self.mate1_name.setFont(font)
        self.mate1_name.setText("")
        self.mate1_name.setAlignment(QtCore.Qt.AlignCenter)
        self.mate1_name.setObjectName("mate1_name")
        self.mate3_name = QtWidgets.QLineEdit(Form)
        self.mate3_name.setGeometry(QtCore.QRect(1250, 570, 141, 51))
        font = QtGui.QFont()
        font.setFamily("微軟正黑體")
        font.setPointSize(24)
        font.setBold(True)
        font.setWeight(75)
        self.mate3_name.setFont(font)
        self.mate3_name.setText("")
        self.mate3_name.setAlignment(QtCore.Qt.AlignCenter)
        self.mate3_name.setObjectName("mate3_name")
        self.mate3_whole_bonus = QtWidgets.QLineEdit(Form)
        self.mate3_whole_bonus.setGeometry(QtCore.QRect(1250, 630, 141, 51))
        font = QtGui.QFont()
        font.setFamily("微軟正黑體")
        font.setPointSize(24)
        font.setBold(True)
        font.setWeight(75)
        self.mate3_whole_bonus.setFont(font)
        self.mate3_whole_bonus.setAlignment(QtCore.Qt.AlignCenter)
        self.mate3_whole_bonus.setReadOnly(True)
        self.mate3_whole_bonus.setPlaceholderText("")
        self.mate3_whole_bonus.setObjectName("mate3_whole_bonus")
        self.mate2_name = QtWidgets.QLineEdit(Form)
        self.mate2_name.setGeometry(QtCore.QRect(1250, 400, 141, 51))
        font = QtGui.QFont()
        font.setFamily("微軟正黑體")
        font.setPointSize(24)
        font.setBold(True)
        font.setWeight(75)
        self.mate2_name.setFont(font)
        self.mate2_name.setText("")
        self.mate2_name.setAlignment(QtCore.Qt.AlignCenter)
        self.mate2_name.setObjectName("mate2_name")
        self.mate2_whole_bonus = QtWidgets.QLineEdit(Form)
        self.mate2_whole_bonus.setGeometry(QtCore.QRect(1250, 460, 141, 51))
        font = QtGui.QFont()
        font.setFamily("微軟正黑體")
        font.setPointSize(24)
        font.setBold(True)
        font.setWeight(75)
        self.mate2_whole_bonus.setFont(font)
        self.mate2_whole_bonus.setAlignment(QtCore.Qt.AlignCenter)
        self.mate2_whole_bonus.setReadOnly(True)
        self.mate2_whole_bonus.setPlaceholderText("")
        self.mate2_whole_bonus.setObjectName("mate2_whole_bonus")
        self.bonus_sum = QtWidgets.QLineEdit(Form)
        self.bonus_sum.setGeometry(QtCore.QRect(1250, 840, 141, 51))
        font = QtGui.QFont()
        font.setFamily("微軟正黑體")
        font.setPointSize(24)
        font.setBold(True)
        font.setWeight(75)
        self.bonus_sum.setFont(font)
        self.bonus_sum.setAlignment(QtCore.Qt.AlignCenter)
        self.bonus_sum.setReadOnly(True)
        self.bonus_sum.setPlaceholderText("")
        self.bonus_sum.setObjectName("bonus_sum")
        self.bonus_sum_la = QtWidgets.QLabel(Form)
        self.bonus_sum_la.setGeometry(QtCore.QRect(1240, 780, 171, 41))
        font = QtGui.QFont()
        font.setFamily("微軟正黑體")
        font.setPointSize(32)
        font.setBold(True)
        font.setWeight(75)
        self.bonus_sum_la.setFont(font)
        self.bonus_sum_la.setAlignment(QtCore.Qt.AlignCenter)
        self.bonus_sum_la.setObjectName("bonus_sum_la")
        self.line_7 = QtWidgets.QFrame(Form)
        self.line_7.setGeometry(QtCore.QRect(1240, 730, 161, 16))
        self.line_7.setFrameShadow(QtWidgets.QFrame.Plain)
        self.line_7.setLineWidth(4)
        self.line_7.setFrameShape(QtWidgets.QFrame.HLine)
        self.line_7.setObjectName("line_7")
        self.ch1 = QtWidgets.QCheckBox(Form)
        self.ch1.setGeometry(QtCore.QRect(330, 230, 131, 61))
        self.ch1.setStyleSheet("QCheckBox::indicator\n"
" {\n"
"width: 36px;\n"
" height: 36px;\n"
"}")
        self.ch1.setText("")
        self.ch1.setIconSize(QtCore.QSize(100, 100))
        self.ch1.setCheckable(True)
        self.ch1.setAutoRepeatInterval(200)
        self.ch1.setObjectName("ch1")
        self.ch2 = QtWidgets.QCheckBox(Form)
        self.ch2.setGeometry(QtCore.QRect(330, 280, 131, 61))
        self.ch2.setStyleSheet("QCheckBox::indicator\n"
" {\n"
"width: 36px;\n"
" height: 36px;\n"
"}")
        self.ch2.setText("")
        self.ch2.setIconSize(QtCore.QSize(100, 100))
        self.ch2.setCheckable(True)
        self.ch2.setAutoRepeatInterval(200)
        self.ch2.setObjectName("ch2")
        self.ch4 = QtWidgets.QCheckBox(Form)
        self.ch4.setGeometry(QtCore.QRect(330, 380, 131, 61))
        self.ch4.setStyleSheet("QCheckBox::indicator\n"
" {\n"
"width: 36px;\n"
" height: 36px;\n"
"}")
        self.ch4.setText("")
        self.ch4.setIconSize(QtCore.QSize(100, 100))
        self.ch4.setCheckable(True)
        self.ch4.setAutoRepeatInterval(200)
        self.ch4.setObjectName("ch4")
        self.ch3 = QtWidgets.QCheckBox(Form)
        self.ch3.setGeometry(QtCore.QRect(330, 330, 131, 61))
        self.ch3.setStyleSheet("QCheckBox::indicator\n"
" {\n"
"width: 36px;\n"
" height: 36px;\n"
"}")
        self.ch3.setText("")
        self.ch3.setIconSize(QtCore.QSize(100, 100))
        self.ch3.setCheckable(True)
        self.ch3.setAutoRepeatInterval(200)
        self.ch3.setObjectName("ch3")
        self.ch4_2 = QtWidgets.QCheckBox(Form)
        self.ch4_2.setGeometry(QtCore.QRect(330, 850, 131, 61))
        self.ch4_2.setStyleSheet("QCheckBox::indicator\n"
" {\n"
"width: 36px;\n"
" height: 36px;\n"
"}")
        self.ch4_2.setText("")
        self.ch4_2.setIconSize(QtCore.QSize(100, 100))
        self.ch4_2.setCheckable(True)
        self.ch4_2.setAutoRepeatInterval(200)
        self.ch4_2.setObjectName("ch4_2")
        self.ch2_2 = QtWidgets.QCheckBox(Form)
        self.ch2_2.setGeometry(QtCore.QRect(330, 750, 131, 61))
        self.ch2_2.setStyleSheet("QCheckBox::indicator\n"
" {\n"
"width: 36px;\n"
" height: 36px;\n"
"}")
        self.ch2_2.setText("")
        self.ch2_2.setIconSize(QtCore.QSize(100, 100))
        self.ch2_2.setCheckable(True)
        self.ch2_2.setAutoRepeatInterval(200)
        self.ch2_2.setObjectName("ch2_2")
        self.ch1_2 = QtWidgets.QCheckBox(Form)
        self.ch1_2.setGeometry(QtCore.QRect(330, 700, 131, 61))
        self.ch1_2.setStyleSheet("QCheckBox::indicator\n"
" {\n"
"width: 36px;\n"
" height: 36px;\n"
"}")
        self.ch1_2.setText("")
        self.ch1_2.setIconSize(QtCore.QSize(100, 100))
        self.ch1_2.setCheckable(True)
        self.ch1_2.setAutoRepeatInterval(200)
        self.ch1_2.setObjectName("ch1_2")
        self.ch3_2 = QtWidgets.QCheckBox(Form)
        self.ch3_2.setGeometry(QtCore.QRect(330, 800, 131, 61))
        self.ch3_2.setStyleSheet("QCheckBox::indicator\n"
" {\n"
"width: 36px;\n"
" height: 36px;\n"
"}")
        self.ch3_2.setText("")
        self.ch3_2.setIconSize(QtCore.QSize(100, 100))
        self.ch3_2.setCheckable(True)
        self.ch3_2.setAutoRepeatInterval(200)
        self.ch3_2.setObjectName("ch3_2")
        self.ch4_3 = QtWidgets.QCheckBox(Form)
        self.ch4_3.setGeometry(QtCore.QRect(730, 380, 131, 61))
        self.ch4_3.setStyleSheet("QCheckBox::indicator\n"
" {\n"
"width: 36px;\n"
" height: 36px;\n"
"}")
        self.ch4_3.setText("")
        self.ch4_3.setIconSize(QtCore.QSize(100, 100))
        self.ch4_3.setCheckable(True)
        self.ch4_3.setAutoRepeatInterval(200)
        self.ch4_3.setObjectName("ch4_3")
        self.ch2_3 = QtWidgets.QCheckBox(Form)
        self.ch2_3.setGeometry(QtCore.QRect(730, 280, 131, 61))
        self.ch2_3.setStyleSheet("QCheckBox::indicator\n"
" {\n"
"width: 36px;\n"
" height: 36px;\n"
"}")
        self.ch2_3.setText("")
        self.ch2_3.setIconSize(QtCore.QSize(100, 100))
        self.ch2_3.setCheckable(True)
        self.ch2_3.setAutoRepeatInterval(200)
        self.ch2_3.setObjectName("ch2_3")
        self.ch1_3 = QtWidgets.QCheckBox(Form)
        self.ch1_3.setGeometry(QtCore.QRect(730, 230, 131, 61))
        self.ch1_3.setStyleSheet("QCheckBox::indicator\n"
" {\n"
"width: 36px;\n"
" height: 36px;\n"
"}")
        self.ch1_3.setText("")
        self.ch1_3.setIconSize(QtCore.QSize(100, 100))
        self.ch1_3.setCheckable(True)
        self.ch1_3.setAutoRepeatInterval(200)
        self.ch1_3.setObjectName("ch1_3")
        self.ch3_3 = QtWidgets.QCheckBox(Form)
        self.ch3_3.setGeometry(QtCore.QRect(730, 330, 131, 61))
        self.ch3_3.setStyleSheet("QCheckBox::indicator\n"
" {\n"
"width: 36px;\n"
" height: 36px;\n"
"}")
        self.ch3_3.setText("")
        self.ch3_3.setIconSize(QtCore.QSize(100, 100))
        self.ch3_3.setCheckable(True)
        self.ch3_3.setAutoRepeatInterval(200)
        self.ch3_3.setObjectName("ch3_3")
        self.ch4_4 = QtWidgets.QCheckBox(Form)
        self.ch4_4.setGeometry(QtCore.QRect(730, 850, 131, 61))
        self.ch4_4.setStyleSheet("QCheckBox::indicator\n"
" {\n"
"width: 36px;\n"
" height: 36px;\n"
"}")
        self.ch4_4.setText("")
        self.ch4_4.setIconSize(QtCore.QSize(100, 100))
        self.ch4_4.setCheckable(True)
        self.ch4_4.setAutoRepeatInterval(200)
        self.ch4_4.setObjectName("ch4_4")
        self.ch3_4 = QtWidgets.QCheckBox(Form)
        self.ch3_4.setGeometry(QtCore.QRect(730, 800, 131, 61))
        self.ch3_4.setStyleSheet("QCheckBox::indicator\n"
" {\n"
"width: 36px;\n"
" height: 36px;\n"
"}")
        self.ch3_4.setText("")
        self.ch3_4.setIconSize(QtCore.QSize(100, 100))
        self.ch3_4.setCheckable(True)
        self.ch3_4.setAutoRepeatInterval(200)
        self.ch3_4.setObjectName("ch3_4")
        self.ch1_4 = QtWidgets.QCheckBox(Form)
        self.ch1_4.setGeometry(QtCore.QRect(730, 700, 131, 61))
        self.ch1_4.setStyleSheet("QCheckBox::indicator\n"
" {\n"
"width: 36px;\n"
" height: 36px;\n"
"}")
        self.ch1_4.setText("")
        self.ch1_4.setIconSize(QtCore.QSize(100, 100))
        self.ch1_4.setCheckable(True)
        self.ch1_4.setAutoRepeatInterval(200)
        self.ch1_4.setObjectName("ch1_4")
        self.ch2_4 = QtWidgets.QCheckBox(Form)
        self.ch2_4.setGeometry(QtCore.QRect(730, 750, 131, 61))
        self.ch2_4.setStyleSheet("QCheckBox::indicator\n"
" {\n"
"width: 36px;\n"
" height: 36px;\n"
"}")
        self.ch2_4.setText("")
        self.ch2_4.setIconSize(QtCore.QSize(100, 100))
        self.ch2_4.setCheckable(True)
        self.ch2_4.setAutoRepeatInterval(200)
        self.ch2_4.setObjectName("ch2_4")
        self.ch4_5 = QtWidgets.QCheckBox(Form)
        self.ch4_5.setGeometry(QtCore.QRect(1130, 380, 131, 61))
        self.ch4_5.setStyleSheet("QCheckBox::indicator\n"
" {\n"
"width: 36px;\n"
" height: 36px;\n"
"}")
        self.ch4_5.setText("")
        self.ch4_5.setIconSize(QtCore.QSize(100, 100))
        self.ch4_5.setCheckable(True)
        self.ch4_5.setAutoRepeatInterval(200)
        self.ch4_5.setObjectName("ch4_5")
        self.ch3_5 = QtWidgets.QCheckBox(Form)
        self.ch3_5.setGeometry(QtCore.QRect(1130, 330, 131, 61))
        self.ch3_5.setStyleSheet("QCheckBox::indicator\n"
" {\n"
"width: 36px;\n"
" height: 36px;\n"
"}")
        self.ch3_5.setText("")
        self.ch3_5.setIconSize(QtCore.QSize(100, 100))
        self.ch3_5.setCheckable(True)
        self.ch3_5.setAutoRepeatInterval(200)
        self.ch3_5.setObjectName("ch3_5")
        self.ch1_5 = QtWidgets.QCheckBox(Form)
        self.ch1_5.setGeometry(QtCore.QRect(1130, 230, 131, 61))
        self.ch1_5.setStyleSheet("QCheckBox::indicator\n"
" {\n"
"width: 36px;\n"
" height: 36px;\n"
"}")
        self.ch1_5.setText("")
        self.ch1_5.setIconSize(QtCore.QSize(100, 100))
        self.ch1_5.setCheckable(True)
        self.ch1_5.setAutoRepeatInterval(200)
        self.ch1_5.setObjectName("ch1_5")
        self.ch2_5 = QtWidgets.QCheckBox(Form)
        self.ch2_5.setGeometry(QtCore.QRect(1130, 280, 131, 61))
        self.ch2_5.setStyleSheet("QCheckBox::indicator\n"
" {\n"
"width: 36px;\n"
" height: 36px;\n"
"}")
        self.ch2_5.setText("")
        self.ch2_5.setIconSize(QtCore.QSize(100, 100))
        self.ch2_5.setCheckable(True)
        self.ch2_5.setAutoRepeatInterval(200)
        self.ch2_5.setObjectName("ch2_5")
        self.ch4_6 = QtWidgets.QCheckBox(Form)
        self.ch4_6.setGeometry(QtCore.QRect(1130, 850, 131, 61))
        self.ch4_6.setStyleSheet("QCheckBox::indicator\n"
" {\n"
"width: 36px;\n"
" height: 36px;\n"
"}")
        self.ch4_6.setText("")
        self.ch4_6.setIconSize(QtCore.QSize(100, 100))
        self.ch4_6.setCheckable(True)
        self.ch4_6.setAutoRepeatInterval(200)
        self.ch4_6.setObjectName("ch4_6")
        self.ch3_6 = QtWidgets.QCheckBox(Form)
        self.ch3_6.setGeometry(QtCore.QRect(1130, 800, 131, 61))
        self.ch3_6.setStyleSheet("QCheckBox::indicator\n"
" {\n"
"width: 36px;\n"
" height: 36px;\n"
"}")
        self.ch3_6.setText("")
        self.ch3_6.setIconSize(QtCore.QSize(100, 100))
        self.ch3_6.setCheckable(True)
        self.ch3_6.setAutoRepeatInterval(200)
        self.ch3_6.setObjectName("ch3_6")
        self.ch2_6 = QtWidgets.QCheckBox(Form)
        self.ch2_6.setGeometry(QtCore.QRect(1130, 750, 131, 61))
        self.ch2_6.setStyleSheet("QCheckBox::indicator\n"
" {\n"
"width: 36px;\n"
" height: 36px;\n"
"}")
        self.ch2_6.setText("")
        self.ch2_6.setIconSize(QtCore.QSize(100, 100))
        self.ch2_6.setCheckable(True)
        self.ch2_6.setAutoRepeatInterval(200)
        self.ch2_6.setObjectName("ch2_6")
        self.ch1_6 = QtWidgets.QCheckBox(Form)
        self.ch1_6.setGeometry(QtCore.QRect(1130, 700, 131, 61))
        self.ch1_6.setStyleSheet("QCheckBox::indicator\n"
" {\n"
"width: 36px;\n"
" height: 36px;\n"
"}")
        self.ch1_6.setText("")
        self.ch1_6.setIconSize(QtCore.QSize(100, 100))
        self.ch1_6.setCheckable(True)
        self.ch1_6.setAutoRepeatInterval(200)
        self.ch1_6.setObjectName("ch1_6")

        self.retranslateUi(Form)
        QtCore.QMetaObject.connectSlotsByName(Form)

        lstn1 = [self.leader_name,self.mate1_name,self.mate2_name,self.mate3_name]
        lstn2 = [self.leader_n, self.mate1_n,self.mate2_n,self.mate3_n]
        for i in range(4):
            lstn1[i].textChanged.connect(lstn2[i])
        
        lstst = [self.case_money,self.case_money_2,self.case_money_3,self.case_money_4,self.case_money_5,self.case_money_6]
        lstst2 = [self.start,self.start_2,self.start_3,self.start_4,self.start_5,self.start_6]
        for i in range(6):
            lstst[i].textChanged.connect(lstst2[i])

        lstlea = [self.case_money,self.case_money_2,self.case_money_3,self.case_money_4,self.case_money_5,self.case_money_6]
        lstlea2 = [self.leader_Changed,self.leader_Changed_2,self.leader_Changed_3,self.leader_Changed_4,self.leader_Changed_5,self.leader_Changed_6]
        for i in range(6):
            lstlea[i].textChanged.connect(lstlea2[i])
        
        lstpa1 = [self.pa1,self.pa2,self.pa3,self.pa4]
        lstpa2 = [self.pa1_Changed,self.pa2_Changed,self.pa3_Changed,self.pa4_Changed]
        for i in range(4):
            lstpa1[i].textChanged.connect(lstpa2[i])

        lstpa1_2 = [self.pa1_2,self.pa2_2,self.pa3_2,self.pa4_2]
        lstpa2_2 = [self.pa1_Changed_2,self.pa2_Changed_2,self.pa3_Changed_2,self.pa4_Changed_2]
        for i in range(4):
            lstpa1_2[i].textChanged.connect(lstpa2_2[i])

        lstpa1_3 = [self.pa1_3,self.pa2_3,self.pa3_3,self.pa4_3]
        lstpa2_3 = [self.pa1_Changed_3,self.pa2_Changed_3,self.pa3_Changed_3,self.pa4_Changed_3]
        for i in range(4):
            lstpa1_3[i].textChanged.connect(lstpa2_3[i])

        lstpa1_4 = [self.pa1_4,self.pa2_4,self.pa3_4,self.pa4_4]
        lstpa2_4 = [self.pa1_Changed_4,self.pa2_Changed_4,self.pa3_Changed_4,self.pa4_Changed_4]
        for i in range(4):
            lstpa1_4[i].textChanged.connect(lstpa2_4[i])

        lstpa1_5 = [self.pa1_5,self.pa2_5,self.pa3_5,self.pa4_5]
        lstpa2_5 = [self.pa1_Changed_5,self.pa2_Changed_5,self.pa3_Changed_5,self.pa4_Changed_5]
        for i in range(4):
            lstpa1_5[i].textChanged.connect(lstpa2_5[i])

        lstpa1_6 = [self.pa1_6,self.pa2_6,self.pa3_6,self.pa4_6]
        lstpa2_6 = [self.pa1_Changed_6,self.pa2_Changed_6,self.pa3_Changed_6,self.pa4_Changed_6]
        for i in range(4):
            lstpa1_6[i].textChanged.connect(lstpa2_6[i])

        lstbdd = [self.case_money,self.pa1,self.pa2,self.pa3,self.pa4]
        for i in range(len(lstbdd)):
            lstbdd[i].textChanged.connect(self.bonusadd)
            lstbdd[i].textChanged.connect(self.cl_cant_1)

        lstbdd_2 = [self.case_money_2,self.pa1_2,self.pa2_2,self.pa3_2,self.pa4_2]
        for i in range(len(lstbdd_2)):
            lstbdd_2[i].textChanged.connect(self.bonusadd_2)
            lstbdd_2[i].textChanged.connect(self.cl_cant_2)

        lstbdd_3 = [self.case_money_3,self.pa1_3,self.pa2_3,self.pa3_3,self.pa4_3]
        for i in range(len(lstbdd_3)):
            lstbdd_3[i].textChanged.connect(self.bonusadd_3)
            lstbdd_3[i].textChanged.connect(self.cl_cant_3)

        lstbdd_4 = [self.case_money_4,self.pa1_4,self.pa2_4,self.pa3_4,self.pa4_4]
        for i in range(len(lstbdd_4)):
            lstbdd_4[i].textChanged.connect(self.bonusadd_4)
            lstbdd_4[i].textChanged.connect(self.cl_cant_4)

        lstbdd_5 = [self.case_money_5,self.pa1_5,self.pa2_5,self.pa3_5,self.pa4_5]
        for i in range(len(lstbdd_5)):
            lstbdd_5[i].textChanged.connect(self.bonusadd_5)
            lstbdd_5[i].textChanged.connect(self.cl_cant_5)

        lstbdd_6 = [self.case_money_6,self.pa1_6,self.pa2_6,self.pa3_6,self.pa4_6]
        for i in range(len(lstbdd_6)):
            lstbdd_6[i].textChanged.connect(self.bonusadd_6)
            lstbdd_6[i].textChanged.connect(self.cl_cant_6)

        lstmt1_sum = [self.case_money,self.case_money_2,self.case_money_3,self.case_money_4,self.case_money_5,self.case_money_6,
                    self.pa2,self.pa2_2,self.pa2_3,self.pa2_4,self.pa2_5,self.pa2_6]
        for i in range(len(lstmt1_sum)):
            lstmt1_sum[i].textChanged.connect(self.mate1_sum)

        lstmt2_sum = [self.case_money,self.case_money_2,self.case_money_3,self.case_money_4,self.case_money_5,self.case_money_6,
                    self.pa3,self.pa3_2,self.pa3_3,self.pa3_4,self.pa3_5,self.pa3_6]
        for i in range(len(lstmt2_sum)):
            lstmt2_sum[i].textChanged.connect(self.mate2_sum)

        lstmt3_sum = [self.case_money,self.case_money_2,self.case_money_3,self.case_money_4,self.case_money_5,self.case_money_6,
                    self.pa4,self.pa4_2,self.pa4_3,self.pa4_4,self.pa4_5,self.pa4_6]
        for i in range(len(lstmt3_sum)):
            lstmt3_sum[i].textChanged.connect(self.mate3_sum)
        
        lstlea_sum = [self.case_money,self.case_money_2,self.case_money_3,self.case_money_4,self.case_money_5,self.case_money_6,
                    self.pa1,self.pa1_2,self.pa1_3,self.pa1_4,self.pa1_5,self.pa1_6]
        for i in range(len(lstlea_sum)):
            lstlea_sum[i].textChanged.connect(self.leader_sum)

        lstwhosum = [self.case_money,self.case_money_2,self.case_money_3,self.case_money_4,self.case_money_5,self.case_money_6,
                    self.pa1,self.pa1_2,self.pa1_3,self.pa1_4,self.pa1_5,self.pa1_6,
                    self.pa2,self.pa2_2,self.pa2_3,self.pa2_4,self.pa2_5,self.pa2_6,
                    self.pa3,self.pa3_2,self.pa3_3,self.pa3_4,self.pa3_5,self.pa3_6,
                    self.pa4,self.pa4_2,self.pa4_3,self.pa4_4,self.pa4_5,self.pa4_6]
        for i in range(len(lstwhosum)):
            lstwhosum[i].textChanged.connect(self.whole_sum)
        

        lstck = [self.ch1,self.ch2,self.ch3,self.ch4,self.ch1_2,self.ch2_2,self.ch3_2,self.ch4_2,
                self.ch1_3,self.ch2_3,self.ch3_3,self.ch4_3,self.ch1_4,self.ch2_4,self.ch3_4,self.ch4_4,
                self.ch1_5,self.ch2_5,self.ch3_5,self.ch4_5,self.ch1_6,self.ch2_6,self.ch3_6,self.ch4_6]


        lstckd = [self.click_1_1,self.click_1_2,self.click_1_3,self.click_1_4,self.click_2_1,self.click_2_2,self.click_2_3,self.click_2_4,
                self.click_3_1,self.click_3_2,self.click_3_3,self.click_3_4,self.click_4_1,self.click_4_2,self.click_4_3,self.click_4_4,
                self.click_5_1,self.click_5_2,self.click_5_3,self.click_5_4,self.click_6_1,self.click_6_2,self.click_6_3,self.click_6_4]
        for i in range(len(lstck)):
            lstck[i].stateChanged.connect(lstckd[i])
            
        
        lstck_fuck = [self.check1,self.check2,self.check3,self.check4,self.check1_2,self.check2_2,self.check3_2,self.check4_2,
                        self.check1_3,self.check2_3,self.check3_3,self.check4_3,self.check1_4,self.check2_4,self.check3_4,self.check4_4,
                        self.check1_5,self.check2_5,self.check3_5,self.check4_5,self.check1_6,self.check2_6,self.check3_6,self.check4_6]
        for i in range(len(lstck)):
            lstck[i].stateChanged.connect(lstck_fuck[i])

        lst_ch1 = [self.ch1,self.ch1_2,self.ch1_3,self.ch1_4,self.ch1_5,self.ch1_6]
        for i in range(len(lst_ch1)):
            lst_ch1[i].stateChanged.connect(self.leader_sum)

        lst_ch2 = [self.ch2,self.ch2_2,self.ch2_3,self.ch2_4,self.ch2_5,self.ch2_6]
        for i in range(len(lst_ch2)):
            lst_ch2[i].stateChanged.connect(self.mate1_sum)

        lst_ch3 = [self.ch3,self.ch3_2,self.ch3_3,self.ch3_4,self.ch3_5,self.ch3_6]
        for i in range(len(lst_ch3)):
            lst_ch3[i].stateChanged.connect(self.mate2_sum)

        lst_ch4 = [self.ch4,self.ch4_2,self.ch4_3,self.ch4_4,self.ch4_5,self.ch4_6]
        for i in range(len(lst_ch4)):
            lst_ch4[i].stateChanged.connect(self.mate3_sum)

        # self.ch1.stateChanged.connect(self.leader_sum)


        lst_whole_ch = [self.ch1,self.ch2,self.ch3,self.ch4,self.ch1_2,self.ch2_2,self.ch3_2,self.ch4_2,
                        self.ch1_3,self.ch2_3,self.ch3_3,self.ch4_3,self.ch1_4,self.ch2_4,self.ch3_4,self.ch4_4,
                        self.ch1_5,self.ch2_5,self.ch3_5,self.ch4_5,self.ch1_6,self.ch2_6,self.ch3_6,self.ch4_6]
        for i in range(len(lst_whole_ch)):
            lst_whole_ch[i].stateChanged.connect(self.whole_sum)
        # self.ch1.stateChanged.connect(self.whole_sum)


    def retranslateUi(self, Form):
        _translate = QtCore.QCoreApplication.translate
        Form.setWindowTitle(_translate("Form", "Form"))
        self.proj.setPlaceholderText(_translate("Form", "請輸入專案名稱"))
        self.case_money.setPlaceholderText(_translate("Form", "接案金額"))
        self.dayline.setPlaceholderText(_translate("Form", "結案日期"))
        self.whole_bonus_la.setText(_translate("Form", "獎金總額"))
        self.leader_bonus_la.setText(_translate("Form", "管理獎金"))
        self.pa1_la.setText(_translate("Form", "%"))
        self.pa2_la.setText(_translate("Form", "%"))
        self.pa3_la.setText(_translate("Form", "%"))
        self.pa4_la.setText(_translate("Form", "%"))
        self.whole_bonus_la_2.setText(_translate("Form", "獎金總額"))
        self.pa4_la_2.setText(_translate("Form", "%"))
        self.leader_bonus_la_2.setText(_translate("Form", "管理獎金"))
        self.pa1_la_2.setText(_translate("Form", "%"))
        self.dayline_2.setPlaceholderText(_translate("Form", "結案日期"))
        self.pa2_la_2.setText(_translate("Form", "%"))
        self.pa3_la_2.setText(_translate("Form", "%"))
        self.proj_2.setPlaceholderText(_translate("Form", "請輸入專案名稱"))
        self.case_money_2.setPlaceholderText(_translate("Form", "接案金額"))
        self.case_money_4.setPlaceholderText(_translate("Form", "接案金額"))
        self.pa4_la_3.setText(_translate("Form", "%"))
        self.whole_bonus_la_3.setText(_translate("Form", "獎金總額"))
        self.case_money_3.setPlaceholderText(_translate("Form", "接案金額"))
        self.proj_3.setPlaceholderText(_translate("Form", "請輸入專案名稱"))
        self.pa3_la_3.setText(_translate("Form", "%"))
        self.proj_4.setPlaceholderText(_translate("Form", "請輸入專案名稱"))
        self.pa2_la_3.setText(_translate("Form", "%"))
        self.dayline_4.setPlaceholderText(_translate("Form", "結案日期"))
        self.pa4_la_4.setText(_translate("Form", "%"))
        self.pa3_la_4.setText(_translate("Form", "%"))
        self.dayline_3.setPlaceholderText(_translate("Form", "結案日期"))
        self.whole_bonus_la_4.setText(_translate("Form", "獎金總額"))
        self.pa1_la_3.setText(_translate("Form", "%"))
        self.pa1_la_4.setText(_translate("Form", "%"))
        self.leader_bonus_la_4.setText(_translate("Form", "管理獎金"))
        self.pa2_la_4.setText(_translate("Form", "%"))
        self.leader_bonus_la_3.setText(_translate("Form", "管理獎金"))
        self.pa1_la_5.setText(_translate("Form", "%"))
        self.dayline_5.setPlaceholderText(_translate("Form", "結案日期"))
        self.case_money_6.setPlaceholderText(_translate("Form", "接案金額"))
        self.pa4_la_5.setText(_translate("Form", "%"))
        self.proj_5.setPlaceholderText(_translate("Form", "請輸入專案名稱"))
        self.whole_bonus_la_6.setText(_translate("Form", "獎金總額"))
        self.pa3_la_5.setText(_translate("Form", "%"))
        self.whole_bonus_la_5.setText(_translate("Form", "獎金總額"))
        self.pa3_la_6.setText(_translate("Form", "%"))
        self.pa2_la_6.setText(_translate("Form", "%"))
        self.leader_bonus_la_6.setText(_translate("Form", "管理獎金"))
        self.pa1_la_6.setText(_translate("Form", "%"))
        self.leader_bonus_la_5.setText(_translate("Form", "管理獎金"))
        self.proj_6.setPlaceholderText(_translate("Form", "請輸入專案名稱"))
        self.case_money_5.setPlaceholderText(_translate("Form", "接案金額"))
        self.dayline_6.setPlaceholderText(_translate("Form", "結案日期"))
        self.pa2_la_5.setText(_translate("Form", "%"))
        self.pa4_la_6.setText(_translate("Form", "%"))
        self.leader_name.setPlaceholderText(_translate("Form", "組長名稱"))
        self.leader_whole_bonus.setText(_translate("Form", "0"))
        self.mate1_whole_bonus.setText(_translate("Form", "0"))
        self.mate1_name.setPlaceholderText(_translate("Form", "員工名稱"))
        self.mate3_name.setPlaceholderText(_translate("Form", "員工名稱"))
        self.mate3_whole_bonus.setText(_translate("Form", "0"))
        self.mate2_name.setPlaceholderText(_translate("Form", "員工名稱"))
        self.mate2_whole_bonus.setText(_translate("Form", "0"))
        self.bonus_sum.setText(_translate("Form", "0"))
        self.bonus_sum_la.setText(_translate("Form", "獎金合計"))

    def leader_n(self,leader):
        self.leader.setText(leader)
        self.leader_2.setText(leader)
        self.leader_3.setText(leader)
        self.leader_4.setText(leader)
        self.leader_5.setText(leader)
        self.leader_6.setText(leader)

    def mate1_n(self,mate1):
        self.mate1.setText(mate1)
        self.mate1_2.setText(mate1)
        self.mate1_3.setText(mate1)
        self.mate1_4.setText(mate1)
        self.mate1_5.setText(mate1)
        self.mate1_6.setText(mate1)
        
    def mate2_n(self,mate2):
        self.mate2.setText(mate2)
        self.mate2_2.setText(mate2)
        self.mate2_3.setText(mate2)
        self.mate2_4.setText(mate2)
        self.mate2_5.setText(mate2)
        self.mate2_6.setText(mate2)


    def mate3_n(self,mate3):
        self.mate3.setText(mate3)
        self.mate3_2.setText(mate3)
        self.mate3_3.setText(mate3)
        self.mate3_4.setText(mate3)
        self.mate3_5.setText(mate3)
        self.mate3_6.setText(mate3)

    def start(self):
        lst = [self.pa1,self.pa2,self.pa3,self.pa4,self.bonus1,self.bonus2,self.bonus3,self.bonus4]
        for i in range(len(lst)):
            lst[i].setText("")

    def start_2(self):
        lst = [self.pa1_2,self.pa2_2,self.pa3_2,self.pa4_2,self.bonus1_2,self.bonus2_2,self.bonus3_2,self.bonus4_2]
        for i in range(len(lst)):
            lst[i].setText("")

    def start_3(self):
        lst = [self.pa1_3,self.pa2_3,self.pa3_3,self.pa4_3,self.bonus1_3,self.bonus2_3,self.bonus3_3,self.bonus4_3]
        for i in range(len(lst)):
            lst[i].setText("")
    
    def start_4(self):
        lst = [self.pa1_4,self.pa2_4,self.pa3_4,self.pa4_4,self.bonus1_4,self.bonus2_4,self.bonus3_4,self.bonus4_4]
        for i in range(len(lst)):
            lst[i].setText("")
    
    def start_5(self):
        lst = [self.pa1_5,self.pa2_5,self.pa3_5,self.pa4_5,self.bonus1_5,self.bonus2_5,self.bonus3_5,self.bonus4_5]
        for i in range(len(lst)):
            lst[i].setText("")

    def start_6(self):
        lst = [self.pa1_6,self.pa2_6,self.pa3_6,self.pa4_6,self.bonus1_6,self.bonus2_6,self.bonus3_6,self.bonus4_6]
        for i in range(len(lst)):
            lst[i].setText("")


    def pa1_Changed(self, per):
        if per.isdigit():
            if self.pa1.text() == "":
                self.bonus1.setText("")

            elif self.case_money.text() == "":
                self.bonus1.setText("")
            else:
                bo1 = 0
                bo1 = eval(self.case_money.text())
                bo2 = math.ceil(float(bo1)*0.05)
                a = bo2*(float(per)*0.01)
                self.bonus1.setText(str("%.1f"%(a)))

                self.ch1.setCheckState(False)
                self.ch2.setCheckState(False)
                self.ch3.setCheckState(False)
                self.ch4.setCheckState(False)
        
        else:
            self.bonus1.setText("")
            

    def pa2_Changed(self, per):
        if per.isdigit():
            if self.pa2.text() == "":
                self.bonus2.setText("")
            elif self.case_money.text() == "":
                self.bonus2.setText("")
            else:
                bo1 = 0
                bo1 = eval(self.case_money.text())
                bo2 = math.ceil(float(bo1)*0.05)
                a = bo2*(float(per)*0.01)
                self.bonus2.setText(str("%.1f"%(a)))

                self.ch1.setCheckState(False)
                self.ch2.setCheckState(False)
                self.ch3.setCheckState(False)
                self.ch4.setCheckState(False)
        else:
            self.bonus2.setText("")

    def pa3_Changed(self, per):
        if per.isdigit():
            if self.pa3.text() == "":
                self.bonus3.setText("")
            elif self.case_money.text() == "":
                self.bonus3.setText("")
            else:
                bo1 = 0
                bo1 = int(self.case_money.text())
                bo2 = math.ceil(float(bo1)*0.05)
                a = bo2*(float(per)*0.01)
                self.bonus3.setText(str("%.1f"%(a)))

                self.ch1.setCheckState(False)
                self.ch2.setCheckState(False)
                self.ch3.setCheckState(False)
                self.ch4.setCheckState(False)
        else:
            self.bonus3.setText("")

    def pa4_Changed(self, per):
        if per.isdigit():
            if self.pa4.text() == "":
                self.bonus4.setText("")
            elif self.case_money.text() == "":
                self.bonus4.setText("")
            else:
                bo1 = 0
                bo1 = int(self.case_money.text())
                bo2 = math.ceil(float(bo1)*0.05)
                a = bo2*(float(per)*0.01)
                self.bonus4.setText(str("%.1f"%(a)))

                self.ch1.setCheckState(False)
                self.ch2.setCheckState(False)
                self.ch3.setCheckState(False)
                self.ch4.setCheckState(False)
        else:
            self.bonus4.setText("")


    def pa1_Changed_2(self, per):
        if per.isdigit():
            if self.pa1_2.text() == "":
                self.bonus1_2.setText("")
            elif self.case_money_2.text() == "":
                self.bonus1_2.setText("")
            else:
                bo1 = 0
                bo1 = int(self.case_money_2.text())
                bo2 = math.ceil(float(bo1)*0.05)
                a = bo2*(float(per)*0.01)
                self.bonus1_2.setText(str("%.1f"%(a)))

                self.ch1_2.setCheckState(False)
                self.ch2_2.setCheckState(False)
                self.ch3_2.setCheckState(False)
                self.ch4_2.setCheckState(False)
        else:
            self.bonus1_2.setText("")

    def pa2_Changed_2(self, per):
        if per.isdigit():
            if self.pa2_2.text() == "":
                self.bonus2_2.setText("")
            elif self.case_money_2.text() == "":
                self.bonus2_2.setText("")
            else:
                bo1 = 0
                bo1 = int(self.case_money_2.text())
                bo2 = math.ceil(float(bo1)*0.05)
                a = bo2*(float(per)*0.01)
                self.bonus2_2.setText(str("%.1f"%(a)))

                self.ch1_2.setCheckState(False)
                self.ch2_2.setCheckState(False)
                self.ch3_2.setCheckState(False)
                self.ch4_2.setCheckState(False)
        else:
            self.bonus2_2.setText("")

    def pa3_Changed_2(self, per):
        if per.isdigit():
            if self.pa3_2.text() == "":
                self.bonus3_2.setText("")
            elif self.case_money_2.text() == "":
                self.bonus3_2.setText("")
            else:
                bo1 = 0
                bo1 = int(self.case_money_2.text())
                bo2 = math.ceil(float(bo1)*0.05)
                a = bo2*(float(per)*0.01)
                self.bonus3_2.setText(str("%.1f"%(a)))

                self.ch1_2.setCheckState(False)
                self.ch2_2.setCheckState(False)
                self.ch3_2.setCheckState(False)
                self.ch4_2.setCheckState(False)
        else:
            self.bonus3_2.setText("")

    def pa4_Changed_2(self, per):
        if per.isdigit():
            if self.pa4_2.text() == "":
                self.bonus4_2.setText("")
            elif self.case_money_2.text() == "":
                self.bonus4_2.setText("")
            else:
                bo1 = 0
                bo1 = int(self.case_money_2.text())
                bo2 = math.ceil(float(bo1)*0.05)
                a = bo2*(float(per)*0.01)
                self.bonus4_2.setText(str("%.1f"%(a)))

                self.ch1_2.setCheckState(False)
                self.ch2_2.setCheckState(False)
                self.ch3_2.setCheckState(False)
                self.ch4_2.setCheckState(False)
        else:
            self.bonus4_2.setText("")

    def pa1_Changed_3(self, per):
        if per.isdigit():
            if self.pa1_3.text() == "":
                self.bonus1_3.setText("")
            elif self.case_money_3.text() == "":
                self.bonus1_3.setText("")
            else:
                bo1 = 0
                bo1 = int(self.case_money_3.text())
                bo2 = math.ceil(float(bo1)*0.05)
                a = bo2*(float(per)*0.01)
                self.bonus1_3.setText(str("%.1f"%(a)))

                self.ch1_3.setCheckState(False)
                self.ch2_3.setCheckState(False)
                self.ch3_3.setCheckState(False)
                self.ch4_3.setCheckState(False)
        else:
            self.bonus1_3.setText("")

    def pa2_Changed_3(self, per):
        if per.isdigit():
            if self.pa2_3.text() == "":
                self.bonus2_3.setText("")
            elif self.case_money_3.text() == "":
                self.bonus2_3.setText("")
            else:
                bo1 = 0
                bo1 = int(self.case_money_3.text())
                bo2 = math.ceil(float(bo1)*0.05)
                a = bo2*(float(per)*0.01)
                self.bonus2_3.setText(str("%.1f"%(a)))

                self.ch1_3.setCheckState(False)
                self.ch2_3.setCheckState(False)
                self.ch3_3.setCheckState(False)
                self.ch4_3.setCheckState(False)
        else:
            self.bonus2_3.setText("")

    def pa3_Changed_3(self, per):
        if per.isdigit():
            if self.pa3_3.text() == "":
                self.bonus3_3.setText("")
            elif self.case_money_3.text() == "":
                self.bonus3_3.setText("")
            else:
                bo1 = 0
                bo1 = int(self.case_money_3.text())
                bo2 = math.ceil(float(bo1)*0.05)
                a = bo2*(float(per)*0.01)
                self.bonus3_3.setText(str("%.1f"%(a)))

                self.ch1_3.setCheckState(False)
                self.ch2_3.setCheckState(False)
                self.ch3_3.setCheckState(False)
                self.ch4_3.setCheckState(False)
        else:
            self.bonus3_3.setText("")

    def pa4_Changed_3(self, per):
        if per.isdigit():
            if self.pa4_3.text() == "":
                self.bonus4_3.setText("")
            elif self.case_money_3.text() == "":
                self.bonus4_3.setText("")
            else:
                bo1 = 0
                bo1 = int(self.case_money_3.text())
                bo2 = math.ceil(float(bo1)*0.05)
                a = bo2*(float(per)*0.01)
                self.bonus4_3.setText(str("%.1f"%(a)))

                self.ch1_3.setCheckState(False)
                self.ch2_3.setCheckState(False)
                self.ch3_3.setCheckState(False)
                self.ch4_3.setCheckState(False)
        else:
            self.bonus4_3.setText("")

    def pa1_Changed_4(self, per):
        if per.isdigit():
            if self.pa1_4.text() == "":
                self.bonus1_4.setText("")
            elif self.case_money_4.text() == "":
                self.bonus1_4.setText("")
            else:
                bo1 = 0
                bo1 = int(self.case_money_4.text())
                bo2 = math.ceil(float(bo1)*0.05)
                a = bo2*(float(per)*0.01)
                self.bonus1_4.setText(str("%.1f"%(a)))

                self.ch1_4.setCheckState(False)
                self.ch2_4.setCheckState(False)
                self.ch3_4.setCheckState(False)
                self.ch4_4.setCheckState(False)
        else:
            self.bonus1_4.setText("")

    def pa2_Changed_4(self, per):
        if per.isdigit():
            if self.pa2_4.text() == "":
                self.bonus2_4.setText("")
            elif self.case_money_4.text() == "":
                self.bonus2_4.setText("")
            else:
                bo1 = 0
                bo1 = int(self.case_money_4.text())
                bo2 = math.ceil(float(bo1)*0.05)
                a = bo2*(float(per)*0.01)
                self.bonus2_4.setText(str("%.1f"%(a)))

                self.ch1_4.setCheckState(False)
                self.ch2_4.setCheckState(False)
                self.ch3_4.setCheckState(False)
                self.ch4_4.setCheckState(False)
        else:
            self.bonus2_4.setText("")

    def pa3_Changed_4(self, per):
        if per.isdigit():
            if self.pa3_4.text() == "":
                self.bonus3_4.setText("")
            elif self.case_money_4.text() == "":
                self.bonus3_4.setText("")
            else:
                bo1 = 0
                bo1 = int(self.case_money_4.text())
                bo2 = math.ceil(float(bo1)*0.05)
                a = bo2*(float(per)*0.01)
                self.bonus3_4.setText(str("%.1f"%(a)))

                self.ch1_4.setCheckState(False)
                self.ch2_4.setCheckState(False)
                self.ch3_4.setCheckState(False)
                self.ch4_4.setCheckState(False)
        else:
            self.bonus3_4.setText("")

    def pa4_Changed_4(self, per):
        if per.isdigit():
            if self.pa4_4.text() == "":
                self.bonus4_4.setText("")
            elif self.case_money_4.text() == "":
                self.bonus4_4.setText("")
            else:
                bo1 = 0
                bo1 = int(self.case_money_4.text())
                bo2 = math.ceil(float(bo1)*0.05)
                a = bo2*(float(per)*0.01)
                self.bonus4_4.setText(str("%.1f"%(a)))

                self.ch1_4.setCheckState(False)
                self.ch2_4.setCheckState(False)
                self.ch3_4.setCheckState(False)
                self.ch4_4.setCheckState(False)
        else:
            self.bonus4_4.setText("")

    def pa1_Changed_5(self, per):
        if per.isdigit():
            if self.pa1_5.text() == "":
                self.bonus1_5.setText("")
            elif self.case_money_5.text() == "":
                self.bonus1_5.setText("")
            else:
                bo1 = 0
                bo1 = int(self.case_money_5.text())
                bo2 = math.ceil(float(bo1)*0.05)
                a = bo2*(float(per)*0.01)
                self.bonus1_5.setText(str("%.1f"%(a)))

                self.ch1_5.setCheckState(False)
                self.ch2_5.setCheckState(False)
                self.ch3_5.setCheckState(False)
                self.ch4_5.setCheckState(False)
        else:
            self.bonus1_5.setText("")

    def pa2_Changed_5(self, per):
        if per.isdigit():
            if self.pa2_5.text() == "":
                self.bonus2_5.setText("")
            elif self.case_money_5.text() == "":
                self.bonus2_5.setText("")
            else:
                bo1 = 0
                bo1 = int(self.case_money_5.text())
                bo2 = math.ceil(float(bo1)*0.05)
                a = bo2*(float(per)*0.01)
                self.bonus2_5.setText(str("%.1f"%(a)))

                self.ch1_5.setCheckState(False)
                self.ch2_5.setCheckState(False)
                self.ch3_5.setCheckState(False)
                self.ch4_5.setCheckState(False)
        else:
            self.bonus2_5.setText("")

    def pa3_Changed_5(self, per):
        if per.isdigit():
            if self.pa3_5.text() == "":
                self.bonus3_5.setText("")
            elif self.case_money_5.text() == "":
                self.bonus3_5.setText("")
            else:
                bo1 = 0
                bo1 = int(self.case_money_5.text())
                bo2 = math.ceil(float(bo1)*0.05)
                a = bo2*(float(per)*0.01)
                self.bonus3_5.setText(str("%.1f"%(a)))

                self.ch1_5.setCheckState(False)
                self.ch2_5.setCheckState(False)
                self.ch3_5.setCheckState(False)
                self.ch4_5.setCheckState(False)
        else:
            self.bonus3_5.setText("")

    def pa4_Changed_5(self, per):
        if per.isdigit():
            if self.pa4_5.text() == "":
                self.bonus4_5.setText("")
            elif self.case_money_5.text() == "":
                self.bonus4_5.setText("")
            else:
                bo1 = 0
                bo1 = int(self.case_money_5.text())
                bo2 = math.ceil(float(bo1)*0.05)
                a = bo2*(float(per)*0.01)
                self.bonus4_5.setText(str("%.1f"%(a)))

                self.ch1_5.setCheckState(False)
                self.ch2_5.setCheckState(False)
                self.ch3_5.setCheckState(False)
                self.ch4_5.setCheckState(False)
        else:
            self.bonus4_5.setText("")

    def pa1_Changed_6(self, per):
        if per.isdigit():
            if self.pa1_6.text() == "":
                self.bonus1_6.setText("")
            elif self.case_money_6.text() == "":
                self.bonus1_6.setText("")
            else:
                bo1 = 0
                bo1 = int(self.case_money_6.text())
                bo2 = math.ceil(float(bo1)*0.05)
                a = bo2*(float(per)*0.01)
                self.bonus1_6.setText(str("%.1f"%(a)))

                self.ch1_6.setCheckState(False)
                self.ch2_6.setCheckState(False)
                self.ch3_6.setCheckState(False)
                self.ch4_6.setCheckState(False)
        else:
            self.bonus1_6.setText("")

    def pa2_Changed_6(self, per):
        if per.isdigit():
            if self.pa2_6.text() == "":
                self.bonus2_6.setText("")
            elif self.case_money_6.text() == "":
                self.bonus2_6.setText("")
            else:
                bo1 = 0
                bo1 = int(self.case_money_6.text())
                bo2 = math.ceil(float(bo1)*0.05)
                a = bo2*(float(per)*0.01)
                self.bonus2_6.setText(str("%.1f"%(a)))

                self.ch1_6.setCheckState(False)
                self.ch2_6.setCheckState(False)
                self.ch3_6.setCheckState(False)
                self.ch4_6.setCheckState(False)
        else:
            self.bonus2_6.setText("")

    def pa3_Changed_6(self, per):
        if per.isdigit():
            if self.pa3_6.text() == "":
                self.bonus3_6.setText("")
            elif self.case_money_6.text() == "":
                self.bonus3_6.setText("")
            else:
                bo1 = 0
                bo1 = int(self.case_money_6.text())
                bo2 = math.ceil(float(bo1)*0.05)
                a = bo2*(float(per)*0.01)
                self.bonus3_6.setText(str("%.1f"%(a)))

                self.ch1_6.setCheckState(False)
                self.ch2_6.setCheckState(False)
                self.ch3_6.setCheckState(False)
                self.ch4_6.setCheckState(False)
        else:
            self.bonus3_6.setText("")

    def pa4_Changed_6(self, per):
        if per.isdigit():
            if self.pa4_6.text() == "":
                self.bonus4_6.setText("")
            elif self.case_money_6.text() == "":
                self.bonus4_6.setText("")
            else:
                bo1 = 0
                bo1 = int(self.case_money_6.text())
                bo2 = math.ceil(float(bo1)*0.05)
                a = bo2*(float(per)*0.01)
                self.bonus4_6.setText(str("%.1f"%(a)))

                self.ch1_6.setCheckState(False)
                self.ch2_6.setCheckState(False)
                self.ch3_6.setCheckState(False)
                self.ch4_6.setCheckState(False)
        else:
            self.bonus4_6.setText("")


    def leader_Changed(self, wholemoney):
        if wholemoney.isdigit():
            lst = [self.pa1,self.pa2,self.pa3,self.pa4,self.bonus1,self.bonus2,self.bonus3,self.bonus4,self.whole_bonus,self.leader_bonus]
            if self.case_money.text() == "":
                for i in range(len(lst)):
                    lst[i].setText("")
            else:
                if int(wholemoney) % 100 !=0:
                    self.leader_bonus.setText(str("%d"%(math.ceil(eval(wholemoney)*0.01))))
                else:
                    self.leader_bonus.setText(str("%d"%(int(wholemoney)*0.01)))                   
        else:
            self.leader_bonus.setText("")

    def leader_Changed_2(self, wholemoney):
        if wholemoney.isdigit():
            lst = [self.pa1_2,self.pa2_2,self.pa3_2,self.pa4_2,self.bonus1_2,self.bonus2_2,self.bonus3_2,self.bonus4_2,self.whole_bonus_2,self.leader_bonus_2]
            if self.case_money_2.text() == "":
                for i in range(len(lst)):
                    lst[i].setText("")
            else:
                if int(wholemoney) % 100 !=0:
                    self.leader_bonus_2.setText(str("%d"%(math.ceil(eval(wholemoney)*0.01))))
                else:
                    self.leader_bonus_2.setText(str("%d"%(int(wholemoney)*0.01)))
        else:
            self.leader_bonus_2.setText("")

    def leader_Changed_3(self, wholemoney):
        if wholemoney.isdigit():
            lst = [self.pa1_3,self.pa2_3,self.pa3_3,self.pa4_3,self.bonus1_3,self.bonus2_3,self.bonus3_3,self.bonus4_3,self.whole_bonus_3,self.leader_bonus_3]
            if self.case_money_3.text() == "":
                for i in range(len(lst)):
                    lst[i].setText("")
            else:
                if int(wholemoney) % 100 !=0:
                    self.leader_bonus_3.setText(str("%d"%(math.ceil(eval(wholemoney)*0.01))))
                else:
                    self.leader_bonus_3.setText(str("%d"%(int(wholemoney)*0.01)))
        else:
            self.leader_bonus_3.setText("")

    def leader_Changed_4(self, wholemoney):
        if wholemoney.isdigit():
            lst = [self.pa1_4,self.pa2_4,self.pa3_4,self.pa4_4,self.bonus1_4,self.bonus2_4,self.bonus3_4,self.bonus4_4,self.whole_bonus_4,self.leader_bonus_4]
            if self.case_money_4.text() == "":
                for i in range(len(lst)):
                    lst[i].setText("")
            else:
                if int(wholemoney) % 100 !=0:
                    self.leader_bonus_4.setText(str("%d"%(math.ceil(eval(wholemoney)*0.01))))
                else:
                    self.leader_bonus_4.setText(str("%d"%(int(wholemoney)*0.01)))
        else:
            self.leader_bonus_4.setText("")

    def leader_Changed_5(self, wholemoney):
        if wholemoney.isdigit():
            lst = [self.pa1_5,self.pa2_5,self.pa3_5,self.pa4_5,self.bonus1_5,self.bonus2_5,self.bonus3_5,self.bonus4_5,self.whole_bonus_5,self.leader_bonus_5]
            if self.case_money_5.text() == "":
                for i in range(len(lst)):
                    lst[i].setText("")
            else:
                if int(wholemoney) % 100 !=0:
                    self.leader_bonus_5.setText(str("%d"%(math.ceil(eval(wholemoney)*0.01))))
                else:
                    self.leader_bonus_5.setText(str("%d"%(int(wholemoney)*0.01)))
        else:
            self.leader_bonus_5.setText("")

    def leader_Changed_6(self, wholemoney):
        if wholemoney.isdigit():
            lst = [self.pa1_6,self.pa2_6,self.pa3_6,self.pa4_6,self.bonus1_6,self.bonus2_6,self.bonus3_6,self.bonus4_6,self.whole_bonus_6,self.leader_bonus_6]
            if self.case_money_6.text() == "":
                for i in range(len(lst)):
                    lst[i].setText("")
            else:
                if int(wholemoney) % 100 !=0:
                    self.leader_bonus_6.setText(str("%d"%(math.ceil(eval(wholemoney)*0.01))))
                else:
                    self.leader_bonus_6.setText(str("%d"%(int(wholemoney)*0.01)))
        else:
            self.leader_bonus_6.setText("")

    def bonusadd(self):
        if self.case_money.text().isdigit():
            f = 0
            lst2 = ["0","0","0","0","0"]
            
            if self.case_money.text() =="":
                self.leader_bonus.setText("")
                self.whole_bonus.setText("")
            else:
                a = eval(self.case_money.text())*0.01
                a1 = math.ceil(a)
                lst2[0] = a1

            b = 0
            c = 0
            d = 0
            e = 0

            bolst = [self.pa1,self.pa2,self.pa3,self.pa4]
            bolst2 = [self.bonus1,self.bonus2,self.bonus3,self.bonus4]
            bolst3 = [b,c,d,e]
            
            for i in range(4):
                if bolst[i].text().isdigit():
                    if bolst[i].text() == "":
                        bolst2[i].setText("")
                    elif bolst[i].text() != "":
                        bolst3[i] = eval(bolst[i].text())*a*0.05
                        lst2[i+1] = bolst3[i]
                else:
                    bolst2[i].setText("")
                    lst2[i+1] = "0"

            lst2 = list(map(float,lst2))
            for k in lst2:
                f += k
            
            f = Decimal(str(f)).quantize(Decimal('0'), ROUND_HALF_UP)
            f = int(f)
            
            if f == 0:
                self.whole_bonus.setText("")
            else:
                self.whole_bonus.setText(str(f))
        else:
            self.whole_bonus.setText("")

    def bonusadd_2(self):
        if self.case_money_2.text().isdigit():
            f = 0
            lst2 = ["0","0","0","0","0"]
            
            if self.case_money_2.text() =="":
                self.leader_bonus_2.setText("")
                self.whole_bonus_2.setText("")
            else:
                a = eval(self.case_money_2.text())*0.01
                a1 = math.ceil(a)
                lst2[0] = a1

            b = 0
            c = 0
            d = 0
            e = 0

            bolst = [self.pa1_2,self.pa2_2,self.pa3_2,self.pa4_2]
            bolst2 = [self.bonus1_2,self.bonus2_2,self.bonus3_2,self.bonus4_2]
            bolst3 = [b,c,d,e]

            for i in range(4):
                    if bolst[i].text().isdigit():
                        if bolst[i].text() == "":
                            bolst2[i].setText("")
                        elif bolst[i].text() != "":
                            bolst3[i] = eval(bolst[i].text())*a*0.05
                            lst2[i+1] = bolst3[i]
                    else:
                        bolst2[i].setText("")
                        lst2[i+1] = "0"

            lst2 = list(map(float,lst2))
            for k in lst2:
                f += k

            f = Decimal(str(f)).quantize(Decimal('0'), ROUND_HALF_UP)
            f = int(f)

            if f == 0:
                self.whole_bonus_2.setText("")
            else:
                self.whole_bonus_2.setText(str(f))
        else:
            self.whole_bonus_2.setText("")

    def bonusadd_3(self):
        if self.case_money_3.text().isdigit():
            f = 0
            lst2 = ["0","0","0","0","0"]
            
            if self.case_money_3.text() =="":
                self.leader_bonus_3.setText("")
                self.whole_bonus_3.setText("")
            else:
                a = eval(self.case_money_3.text())*0.01
                a1 = math.ceil(a)
                lst2[0] = a1

            b = 0
            c = 0
            d = 0
            e = 0

            bolst = [self.pa1_3,self.pa2_3,self.pa3_3,self.pa4_3]
            bolst2 = [self.bonus1_3,self.bonus2_3,self.bonus3_3,self.bonus4_3]
            bolst3 = [b,c,d,e]

            for i in range(4):
                    if bolst[i].text().isdigit():
                        if bolst[i].text() == "":
                            bolst2[i].setText("")
                        elif bolst[i].text() != "":
                            bolst3[i] = eval(bolst[i].text())*a*0.05
                            lst2[i+1] = bolst3[i]
                    else:
                        bolst2[i].setText("")
                        lst2[i+1] = "0"

            lst2 = list(map(float,lst2))
            for k in lst2:
                f += k
            
            f = Decimal(str(f)).quantize(Decimal('0'), ROUND_HALF_UP)
            f = int(f)

            if f == 0:
                self.whole_bonus_3.setText("")
            else:
                self.whole_bonus_3.setText(str(f))
        else:
            self.whole_bonus_3.setText("")

    def bonusadd_4(self):
        if self.case_money_4.text().isdigit():
            f = 0
            lst2 = ["0","0","0","0","0"]
            
            if self.case_money_4.text() =="":
                self.leader_bonus_4.setText("")
                self.whole_bonus_4.setText("")
            else:
                a = eval(self.case_money_4.text())*0.01
                a1 = math.ceil(a)
                lst2[0] = a1

            b = 0
            c = 0
            d = 0
            e = 0

            bolst = [self.pa1_4,self.pa2_4,self.pa3_4,self.pa4_4]
            bolst2 = [self.bonus1_4,self.bonus2_4,self.bonus3_4,self.bonus4_4]
            bolst3 = [b,c,d,e]

            for i in range(4):
                    if bolst[i].text().isdigit():
                        if bolst[i].text() == "":
                            bolst2[i].setText("")
                        elif bolst[i].text() != "":
                            bolst3[i] = eval(bolst[i].text())*a*0.05
                            lst2[i+1] = bolst3[i]
                    else:
                        bolst2[i].setText("")
                        lst2[i+1] = "0"

            lst2 = list(map(float,lst2))
            for k in lst2:
                f += k
            
            f = Decimal(str(f)).quantize(Decimal('0'), ROUND_HALF_UP)
            f = int(f)

            if f == 0:
                self.whole_bonus_4.setText("")
            else:
                self.whole_bonus_4.setText(str(f))
        else:
            self.whole_bonus_4.setText("")

    def bonusadd_5(self):
        if self.case_money_5.text().isdigit():
            f = 0
            lst2 = ["0","0","0","0","0"]
            
            if self.case_money_5.text() =="":
                self.leader_bonus_5.setText("")
                self.whole_bonus_5.setText("")
            else:
                a = eval(self.case_money_5.text())*0.01
                a1 = math.ceil(a)
                lst2[0] = a1

            b = 0
            c = 0
            d = 0
            e = 0

            bolst = [self.pa1_5,self.pa2_5,self.pa3_5,self.pa4_5]
            bolst2 = [self.bonus1_5,self.bonus2_5,self.bonus3_5,self.bonus4_5]
            bolst3 = [b,c,d,e]

            for i in range(4):
                    if bolst[i].text().isdigit():
                        if bolst[i].text() == "":
                            bolst2[i].setText("")
                        elif bolst[i].text() != "":
                            bolst3[i] = eval(bolst[i].text())*a*0.05
                            lst2[i+1] = bolst3[i]
                    else:
                        bolst2[i].setText("")
                        lst2[i+1] = "0"

            lst2 = list(map(float,lst2))
            for k in lst2:
                f += k

            f = Decimal(str(f)).quantize(Decimal('0'), ROUND_HALF_UP)
            f = int(f)

            if f == 0:
                self.whole_bonus_5.setText("")
            else:
                self.whole_bonus_5.setText(str(f))
        else:
            self.whole_bonus_5.setText("")

    def bonusadd_6(self):
        if self.case_money_6.text().isdigit():
            f = 0
            lst2 = ["0","0","0","0","0"]
            
            if self.case_money_6.text() =="":
                self.leader_bonus_6.setText("")
                self.whole_bonus_6.setText("")
            else:
                a = eval(self.case_money_6.text())*0.01
                a1 = math.ceil(a)
                lst2[0] = a1

            b = 0
            c = 0
            d = 0
            e = 0

            bolst = [self.pa1_6,self.pa2_6,self.pa3_6,self.pa4_6]
            bolst2 = [self.bonus1_6,self.bonus2_6,self.bonus3_6,self.bonus4_6]
            bolst3 = [b,c,d,e]

            for i in range(4):
                    if bolst[i].text().isdigit():
                        if bolst[i].text() == "":
                            bolst2[i].setText("")
                        elif bolst[i].text() != "":
                            bolst3[i] = eval(bolst[i].text())*a*0.05
                            lst2[i+1] = bolst3[i]
                    else:
                        bolst2[i].setText("")
                        lst2[i+1] = "0"

            lst2 = list(map(float,lst2))
            for k in lst2:
                f += k

            f = Decimal(str(f)).quantize(Decimal('0'), ROUND_HALF_UP)
            f = int(f)

            if f == 0:
                self.whole_bonus_6.setText("")
            else:
                self.whole_bonus_6.setText(str(f))
        else:
            self.whole_bonus_6.setText("")

    def check1(self):
        
        if self.case_money.text() == "":
            self.ch1.setCheckable(False)
        else:
            lst2 = ["0","0","0","0"]
            bolst = [self.pa1,self.pa2,self.pa3,self.pa4]
            bolst2 = ["0","0","0","0"]

            f = 0
                
            bo1 = 0
            bo1 = int(self.case_money.text())
            bo2 = math.ceil(float(bo1)*0.05)
            for i in range(4):
                if bolst[i].text().isdigit():
                    if bolst[i].text() == "":
                        lst2[i].setText("0")
                    elif bolst[i].text() != "":
                        a = bo2*(float(eval(bolst[i].text()))*0.01)
                        a = str("%.1f"%(a))
                        lst2[i] = a
                                
                else:
                    lst2[i] = "0"

            for i in range(4):
                if lst2[i] != "0":
                    x = lst2[i].split(".")
                    lst2[i] = x[1][0]
                        

            lst2 = list(map(int,lst2))
            for k in lst2:
                        f += k
            f = f/10
            f = Decimal(str(f)).quantize(Decimal('0'), ROUND_HALF_UP)
            f = int(f)
                

            if self.ch1.isChecked():
                self.bonus1.setText(str(math.floor(eval(self.bonus1.text())+f)))
                if self.bonus2.text() != "":
                    self.bonus2.setText(str(math.floor(eval(self.bonus2.text()))))
                if self.bonus3.text() != "":
                    self.bonus3.setText(str(math.floor(eval(self.bonus3.text()))))
                if self.bonus4.text() != "":
                    self.bonus4.setText(str(math.floor(eval(self.bonus4.text()))))
            else:
                self.bonus1.setText(str("%.1f"%(bo2*(float(eval(self.pa1.text()))*0.01))))
                if self.bonus2.text() != "":
                    self.bonus2.setText(str("%.1f"%(bo2*(float(eval(self.pa2.text()))*0.01))))
                if self.bonus3.text() != "":
                    self.bonus3.setText(str("%.1f"%(bo2*(float(eval(self.pa3.text()))*0.01))))
                if self.bonus4.text() != "":
                    self.bonus4.setText(str("%.1f"%(bo2*(float(eval(self.pa4.text()))*0.01))))

    def check2(self):
        
        if self.case_money.text() == "":
            self.ch2.setCheckable(False)
        else:
            
        
            lst2 = ["0","0","0","0"]
            bolst = [self.pa1,self.pa2,self.pa3,self.pa4]
            bolst2 = ["0","0","0","0"]
        
        
            f = 0
        
            bo1 = 0
            bo1 = int(self.case_money.text())
            bo2 = math.ceil(float(bo1)*0.05)
        

            for i in range(4):
                if bolst[i].text().isdigit():
                    if bolst[i].text() == "":
                        lst2[i].setText("0")
                    elif bolst[i].text() != "":
                        a = bo2*(float(eval(bolst[i].text()))*0.01)
                        a = str("%.1f"%(a))
                        lst2[i] = a                         
                else:
                    lst2[i] = "0"

            for i in range(4):
                if lst2[i] != "0":
                    x = lst2[i].split(".")
                    lst2[i] = x[1][0]
                

            lst2 = list(map(int,lst2))
            for k in lst2:
                f += k
            f = f/10
            f = Decimal(str(f)).quantize(Decimal('0'), ROUND_HALF_UP)
            f = int(f)

            if self.ch2.isChecked():
                self.bonus2.setText(str(math.floor(eval(self.bonus2.text())+f)))
                if self.bonus1.text() != "":
                    self.bonus1.setText(str(math.floor(eval(self.bonus1.text()))))
                if self.bonus3.text() != "":
                    self.bonus3.setText(str(math.floor(eval(self.bonus3.text()))))
                if self.bonus4.text() != "":
                    self.bonus4.setText(str(math.floor(eval(self.bonus4.text()))))
            else:
                self.bonus2.setText(str("%.1f"%(bo2*(float(eval(self.pa2.text()))*0.01))))
                if self.bonus1.text() != "":
                    self.bonus1.setText(str("%.1f"%(bo2*(float(eval(self.pa1.text()))*0.01))))
                if self.bonus3.text() != "":
                    self.bonus3.setText(str("%.1f"%(bo2*(float(eval(self.pa3.text()))*0.01))))
                if self.bonus4.text() != "":
                    self.bonus4.setText(str("%.1f"%(bo2*(float(eval(self.pa4.text()))*0.01))))

    def check3(self):
        if self.case_money.text() == "":
            self.ch3.setCheckable(False)
        else:
            lst2 = ["0","0","0","0"]
            bolst = [self.pa1,self.pa2,self.pa3,self.pa4]
            bolst2 = ["0","0","0","0"]
       
            f = 0
        
            bo1 = 0
            bo1 = int(self.case_money.text())
            bo2 = math.ceil(float(bo1)*0.05)
        
            for i in range(4):
                if bolst[i].text().isdigit():
                    if bolst[i].text() == "":
                        lst2[i].setText("0")
                    elif bolst[i].text() != "":
                        a = bo2*(float(eval(bolst[i].text()))*0.01)
                        a = str("%.1f"%(a))
                        lst2[i] = a                        
                else:
                    lst2[i] = "0"

            for i in range(4):
                if lst2[i] != "0":
                    x = lst2[i].split(".")
                    lst2[i] = x[1][0]
                

            lst2 = list(map(int,lst2))
            for k in lst2:
                f += k
            f = f/10
            f = Decimal(str(f)).quantize(Decimal('0'), ROUND_HALF_UP)
            f = int(f)

            if self.ch3.isChecked():
                self.bonus3.setText(str(math.floor(eval(self.bonus3.text())+f)))
                if self.bonus2.text() != "":
                    self.bonus2.setText(str(math.floor(eval(self.bonus2.text()))))
                if self.bonus1.text() != "":
                    self.bonus1.setText(str(math.floor(eval(self.bonus1.text()))))
                if self.bonus4.text() != "":
                    self.bonus4.setText(str(math.floor(eval(self.bonus4.text()))))
            else:
                self.bonus3.setText(str("%.1f"%(bo2*(float(eval(self.pa3.text()))*0.01))))
                if self.bonus2.text() != "":
                    self.bonus2.setText(str("%.1f"%(bo2*(float(eval(self.pa2.text()))*0.01))))
                if self.bonus1.text() != "":
                    self.bonus1.setText(str("%.1f"%(bo2*(float(eval(self.pa1.text()))*0.01))))
                if self.bonus4.text() != "":
                    self.bonus4.setText(str("%.1f"%(bo2*(float(eval(self.pa4.text()))*0.01))))

    def check4(self):

        if self.case_money.text() == "":
            self.ch4.setCheckable(False)
        else:
            lst2 = ["0","0","0","0"]
            bolst = [self.pa1,self.pa2,self.pa3,self.pa4]
       
            f = 0
        
            bo1 = 0
            bo1 = int(self.case_money.text())
            bo2 = math.ceil(float(bo1)*0.05)
        

            for i in range(4):
                if bolst[i].text().isdigit():
                    if bolst[i].text() == "":
                        lst2[i].setText("0")
                    elif bolst[i].text() != "":
                        a = bo2*(float(eval(bolst[i].text()))*0.01)
                        a = str("%.1f"%(a))
                        lst2[i] = a            
                else:
                    lst2[i] = "0"

            for i in range(4):
                if lst2[i] != "0":
                    x = lst2[i].split(".")
                    lst2[i] = x[1][0]
                

            lst2 = list(map(int,lst2))
            for k in lst2:
                f += k
            f = f/10
            f = Decimal(str(f)).quantize(Decimal('0'), ROUND_HALF_UP)
            f = int(f)

            if self.ch4.isChecked():
                self.bonus4.setText(str(math.floor(eval(self.bonus4.text())+f)))
                if self.bonus2.text() != "":
                    self.bonus2.setText(str(math.floor(eval(self.bonus2.text()))))
                if self.bonus3.text() != "":
                    self.bonus3.setText(str(math.floor(eval(self.bonus3.text()))))
                if self.bonus1.text() != "":
                    self.bonus1.setText(str(math.floor(eval(self.bonus1.text()))))
            else:
                self.bonus4.setText(str("%.1f"%(bo2*(float(eval(self.pa4.text()))*0.01))))
                if self.bonus2.text() != "":
                    self.bonus2.setText(str("%.1f"%(bo2*(float(eval(self.pa2.text()))*0.01))))
                if self.bonus3.text() != "":
                    self.bonus3.setText(str("%.1f"%(bo2*(float(eval(self.pa3.text()))*0.01))))
                if self.bonus1.text() != "":
                    self.bonus1.setText(str("%.1f"%(bo2*(float(eval(self.pa1.text()))*0.01))))

    def check1_2(self):
        
        if self.case_money_2.text() == "":
            self.ch1_2.setCheckable(False)
        else:
            lst2 = ["0","0","0","0"]
            bolst = [self.pa1_2,self.pa2_2,self.pa3_2,self.pa4_2]

            f = 0
                
            bo1 = 0
            bo1 = int(self.case_money_2.text())
            bo2 = math.ceil(float(bo1)*0.05)
            for i in range(4):
                if bolst[i].text().isdigit():
                    if bolst[i].text() == "":
                        lst2[i].setText("0")
                    elif bolst[i].text() != "":
                        a = bo2*(float(eval(bolst[i].text()))*0.01)
                        a = str("%.1f"%(a))
                        lst2[i] = a
                                
                else:
                    lst2[i] = "0"

            for i in range(4):
                if lst2[i] != "0":
                    x = lst2[i].split(".")
                    lst2[i] = x[1][0]
                        

            lst2 = list(map(int,lst2))
            for k in lst2:
                        f += k
            f = f/10
            f = Decimal(str(f)).quantize(Decimal('0'), ROUND_HALF_UP)
            f = int(f)
                

            if self.ch1_2.isChecked():
                self.bonus1_2.setText(str(math.floor(eval(self.bonus1_2.text())+f)))
                if self.bonus2_2.text() != "":
                    self.bonus2_2.setText(str(math.floor(eval(self.bonus2_2.text()))))
                if self.bonus3_2.text() != "":
                    self.bonus3_2.setText(str(math.floor(eval(self.bonus3_2.text()))))
                if self.bonus4_2.text() != "":
                    self.bonus4_2.setText(str(math.floor(eval(self.bonus4_2.text()))))
            else:
                self.bonus1_2.setText(str("%.1f"%(bo2*(float(eval(self.pa1_2.text()))*0.01))))
                if self.bonus2_2.text() != "":
                    self.bonus2_2.setText(str("%.1f"%(bo2*(float(eval(self.pa2_2.text()))*0.01))))
                if self.bonus3_2.text() != "":
                    self.bonus3_2.setText(str("%.1f"%(bo2*(float(eval(self.pa3_2.text()))*0.01))))
                if self.bonus4_2.text() != "":
                    self.bonus4_2.setText(str("%.1f"%(bo2*(float(eval(self.pa4_2.text()))*0.01))))

    def check2_2(self):
        
        if self.case_money_2.text() == "":
            self.ch2_2.setCheckable(False)
        else:
            lst2 = ["0","0","0","0"]
            bolst = [self.pa1_2,self.pa2_2,self.pa3_2,self.pa4_2]

            f = 0
                
            bo1 = 0
            bo1 = int(self.case_money_2.text())
            bo2 = math.ceil(float(bo1)*0.05)
            for i in range(4):
                if bolst[i].text().isdigit():
                    if bolst[i].text() == "":
                        lst2[i].setText("0")
                    elif bolst[i].text() != "":
                        a = bo2*(float(eval(bolst[i].text()))*0.01)
                        a = str("%.1f"%(a))
                        lst2[i] = a
                                
                else:
                    lst2[i] = "0"

            for i in range(4):
                if lst2[i] != "0":
                    x = lst2[i].split(".")
                    lst2[i] = x[1][0]
                        

            lst2 = list(map(int,lst2))
            for k in lst2:
                        f += k
            f = f/10
            f = Decimal(str(f)).quantize(Decimal('0'), ROUND_HALF_UP)
            f = int(f)
                
            if self.ch2_2.isChecked():
                self.bonus2_2.setText(str(math.floor(eval(self.bonus2_2.text())+f)))
                if self.bonus1_2.text() != "":
                    self.bonus1_2.setText(str(math.floor(eval(self.bonus1_2.text()))))
                if self.bonus3_2.text() != "":
                    self.bonus3_2.setText(str(math.floor(eval(self.bonus3_2.text()))))
                if self.bonus4_2.text() != "":
                    self.bonus4_2.setText(str(math.floor(eval(self.bonus4_2.text()))))
            else:
                self.bonus2_2.setText(str("%.1f"%(bo2*(float(eval(self.pa2_2.text()))*0.01))))
                if self.bonus1_2.text() != "":
                    self.bonus1_2.setText(str("%.1f"%(bo2*(float(eval(self.pa1_2.text()))*0.01))))
                if self.bonus3_2.text() != "":
                    self.bonus3_2.setText(str("%.1f"%(bo2*(float(eval(self.pa3_2.text()))*0.01))))
                if self.bonus4_2.text() != "":
                    self.bonus4_2.setText(str("%.1f"%(bo2*(float(eval(self.pa4_2.text()))*0.01))))

    def check3_2(self):
        
        if self.case_money_2.text() == "":
            self.ch3_2.setCheckable(False)
        else:
            lst2 = ["0","0","0","0"]
            bolst = [self.pa1_2,self.pa2_2,self.pa3_2,self.pa4_2]

            f = 0
                
            bo1 = 0
            bo1 = int(self.case_money_2.text())
            bo2 = math.ceil(float(bo1)*0.05)
            for i in range(4):
                if bolst[i].text().isdigit():
                    if bolst[i].text() == "":
                        lst2[i].setText("0")
                    elif bolst[i].text() != "":
                        a = bo2*(float(eval(bolst[i].text()))*0.01)
                        a = str("%.1f"%(a))
                        lst2[i] = a
                                
                else:
                    lst2[i] = "0"

            for i in range(4):
                if lst2[i] != "0":
                    x = lst2[i].split(".")
                    lst2[i] = x[1][0]
                        

            lst2 = list(map(int,lst2))
            for k in lst2:
                        f += k
            f = f/10
            f = Decimal(str(f)).quantize(Decimal('0'), ROUND_HALF_UP)
            f = int(f)

            if self.ch3_2.isChecked():
                self.bonus3_2.setText(str(math.floor(eval(self.bonus3_2.text())+f)))
                if self.bonus2_2.text() != "":
                    self.bonus2_2.setText(str(math.floor(eval(self.bonus2_2.text()))))
                if self.bonus1_2.text() != "":
                    self.bonus1_2.setText(str(math.floor(eval(self.bonus1_2.text()))))
                if self.bonus4_2.text() != "":
                    self.bonus4_2.setText(str(math.floor(eval(self.bonus4_2.text()))))
            else:
                self.bonus3_2.setText(str("%.1f"%(bo2*(float(eval(self.pa3_2.text()))*0.01))))
                if self.bonus2_2.text() != "":
                    self.bonus2_2.setText(str("%.1f"%(bo2*(float(eval(self.pa2_2.text()))*0.01))))
                if self.bonus1_2.text() != "":
                    self.bonus1_2.setText(str("%.1f"%(bo2*(float(eval(self.pa1_2.text()))*0.01))))
                if self.bonus4_2.text() != "":
                    self.bonus4_2.setText(str("%.1f"%(bo2*(float(eval(self.pa4_2.text()))*0.01))))

    def check4_2(self):
        
        if self.case_money_2.text() == "":
            self.ch4_2.setCheckable(False)
        else:
            lst2 = ["0","0","0","0"]
            bolst = [self.pa1_2,self.pa2_2,self.pa3_2,self.pa4_2]

            f = 0
                
            bo1 = 0
            bo1 = int(self.case_money_2.text())
            bo2 = math.ceil(float(bo1)*0.05)
            for i in range(4):
                if bolst[i].text().isdigit():
                    if bolst[i].text() == "":
                        lst2[i].setText("0")
                    elif bolst[i].text() != "":
                        a = bo2*(float(eval(bolst[i].text()))*0.01)
                        a = str("%.1f"%(a))
                        lst2[i] = a
                                
                else:
                    lst2[i] = "0"

            for i in range(4):
                if lst2[i] != "0":
                    x = lst2[i].split(".")
                    lst2[i] = x[1][0]
                        

            lst2 = list(map(int,lst2))
            for k in lst2:
                        f += k
            f = f/10
            f = Decimal(str(f)).quantize(Decimal('0'), ROUND_HALF_UP)
            f = int(f)

            if self.ch4_2.isChecked():
                self.bonus4_2.setText(str(math.floor(eval(self.bonus4_2.text())+f)))
                if self.bonus2_2.text() != "":
                    self.bonus2_2.setText(str(math.floor(eval(self.bonus2_2.text()))))
                if self.bonus3_2.text() != "":
                    self.bonus3_2.setText(str(math.floor(eval(self.bonus3_2.text()))))
                if self.bonus1_2.text() != "":
                    self.bonus1_2.setText(str(math.floor(eval(self.bonus1_2.text()))))
            else:
                self.bonus4_2.setText(str("%.1f"%(bo2*(float(eval(self.pa4_2.text()))*0.01))))
                if self.bonus2_2.text() != "":
                    self.bonus2_2.setText(str("%.1f"%(bo2*(float(eval(self.pa2_2.text()))*0.01))))
                if self.bonus3_2.text() != "":
                    self.bonus3_2.setText(str("%.1f"%(bo2*(float(eval(self.pa3_2.text()))*0.01))))
                if self.bonus1_2.text() != "":
                    self.bonus1_2.setText(str("%.1f"%(bo2*(float(eval(self.pa1_2.text()))*0.01))))


    def check1_3(self):
        
        if self.case_money_3.text() == "":
            self.ch1_3.setCheckable(False)
        else:
            lst2 = ["0","0","0","0"]
            bolst = [self.pa1_3,self.pa2_3,self.pa3_3,self.pa4_3]

            f = 0
                
            bo1 = 0
            bo1 = int(self.case_money_3.text())
            bo2 = math.ceil(float(bo1)*0.05)
            for i in range(4):
                if bolst[i].text().isdigit():
                    if bolst[i].text() == "":
                        lst2[i].setText("0")
                    elif bolst[i].text() != "":
                        a = bo2*(float(eval(bolst[i].text()))*0.01)
                        a = str("%.1f"%(a))
                        lst2[i] = a
                                
                else:
                    lst2[i] = "0"

            for i in range(4):
                if lst2[i] != "0":
                    x = lst2[i].split(".")
                    lst2[i] = x[1][0]
                        

            lst2 = list(map(int,lst2))
            for k in lst2:
                        f += k
            f = f/10
            f = Decimal(str(f)).quantize(Decimal('0'), ROUND_HALF_UP)
            f = int(f)
                

            if self.ch1_3.isChecked():
                self.bonus1_3.setText(str(math.floor(eval(self.bonus1_3.text())+f)))
                if self.bonus2_3.text() != "":
                    self.bonus2_3.setText(str(math.floor(eval(self.bonus2_3.text()))))
                if self.bonus3_3.text() != "":
                    self.bonus3_3.setText(str(math.floor(eval(self.bonus3_3.text()))))
                if self.bonus4_3.text() != "":
                    self.bonus4_3.setText(str(math.floor(eval(self.bonus4_3.text()))))
            else:
                self.bonus1_3.setText(str("%.1f"%(bo2*(float(eval(self.pa1_3.text()))*0.01))))
                if self.bonus2_3.text() != "":
                    self.bonus2_3.setText(str("%.1f"%(bo2*(float(eval(self.pa2_3.text()))*0.01))))
                if self.bonus3_3.text() != "":
                    self.bonus3_3.setText(str("%.1f"%(bo2*(float(eval(self.pa3_3.text()))*0.01))))
                if self.bonus4_3.text() != "":
                    self.bonus4_3.setText(str("%.1f"%(bo2*(float(eval(self.pa4_3.text()))*0.01))))

    def check2_3(self):
        
        if self.case_money_3.text() == "":
            self.ch2_3.setCheckable(False)
        else:
            lst2 = ["0","0","0","0"]
            bolst = [self.pa1_3,self.pa2_3,self.pa3_3,self.pa4_3]

            f = 0
                
            bo1 = 0
            bo1 = int(self.case_money_3.text())
            bo2 = math.ceil(float(bo1)*0.05)
            for i in range(4):
                if bolst[i].text().isdigit():
                    if bolst[i].text() == "":
                        lst2[i].setText("0")
                    elif bolst[i].text() != "":
                        a = bo2*(float(eval(bolst[i].text()))*0.01)
                        a = str("%.1f"%(a))
                        lst2[i] = a
                                
                else:
                    lst2[i] = "0"

            for i in range(4):
                if lst2[i] != "0":
                    x = lst2[i].split(".")
                    lst2[i] = x[1][0]
                        

            lst2 = list(map(int,lst2))
            for k in lst2:
                        f += k
            f = f/10
            f = Decimal(str(f)).quantize(Decimal('0'), ROUND_HALF_UP)
            f = int(f)
                
            if self.ch2_3.isChecked():
                self.bonus2_3.setText(str(math.floor(eval(self.bonus2_3.text())+f)))
                if self.bonus1_3.text() != "":
                    self.bonus1_3.setText(str(math.floor(eval(self.bonus1_3.text()))))
                if self.bonus3_3.text() != "":
                    self.bonus3_3.setText(str(math.floor(eval(self.bonus3_3.text()))))
                if self.bonus4_3.text() != "":
                    self.bonus4_3.setText(str(math.floor(eval(self.bonus4_3.text()))))
            else:
                self.bonus2_3.setText(str("%.1f"%(bo2*(float(eval(self.pa2_3.text()))*0.01))))
                if self.bonus1_3.text() != "":
                    self.bonus1_3.setText(str("%.1f"%(bo2*(float(eval(self.pa1_3.text()))*0.01))))
                if self.bonus3_3.text() != "":
                    self.bonus3_3.setText(str("%.1f"%(bo2*(float(eval(self.pa3_3.text()))*0.01))))
                if self.bonus4_3.text() != "":
                    self.bonus4_3.setText(str("%.1f"%(bo2*(float(eval(self.pa4_3.text()))*0.01))))

    def check3_3(self):
        
        if self.case_money_3.text() == "":
            self.ch3_3.setCheckable(False)
        else:
            lst2 = ["0","0","0","0"]
            bolst = [self.pa1_3,self.pa2_3,self.pa3_3,self.pa4_3]

            f = 0
                
            bo1 = 0
            bo1 = int(self.case_money_3.text())
            bo2 = math.ceil(float(bo1)*0.05)
            for i in range(4):
                if bolst[i].text().isdigit():
                    if bolst[i].text() == "":
                        lst2[i].setText("0")
                    elif bolst[i].text() != "":
                        a = bo2*(float(eval(bolst[i].text()))*0.01)
                        a = str("%.1f"%(a))
                        lst2[i] = a
                                
                else:
                    lst2[i] = "0"

            for i in range(4):
                if lst2[i] != "0":
                    x = lst2[i].split(".")
                    lst2[i] = x[1][0]
                        

            lst2 = list(map(int,lst2))
            for k in lst2:
                        f += k
            f = f/10
            f = Decimal(str(f)).quantize(Decimal('0'), ROUND_HALF_UP)
            f = int(f)

            if self.ch3_3.isChecked():
                self.bonus3_3.setText(str(math.floor(eval(self.bonus3_3.text())+f)))
                if self.bonus2_3.text() != "":
                    self.bonus2_3.setText(str(math.floor(eval(self.bonus2_3.text()))))
                if self.bonus1_3.text() != "":
                    self.bonus1_3.setText(str(math.floor(eval(self.bonus1_3.text()))))
                if self.bonus4_3.text() != "":
                    self.bonus4_3.setText(str(math.floor(eval(self.bonus4_3.text()))))
            else:
                self.bonus3_3.setText(str("%.1f"%(bo2*(float(eval(self.pa3_3.text()))*0.01))))
                if self.bonus2_3.text() != "":
                    self.bonus2_3.setText(str("%.1f"%(bo2*(float(eval(self.pa2_3.text()))*0.01))))
                if self.bonus1_3.text() != "":
                    self.bonus1_3.setText(str("%.1f"%(bo2*(float(eval(self.pa1_3.text()))*0.01))))
                if self.bonus4_3.text() != "":
                    self.bonus4_3.setText(str("%.1f"%(bo2*(float(eval(self.pa4_3.text()))*0.01))))

    def check4_3(self):
        
        if self.case_money_3.text() == "":
            self.ch4_3.setCheckable(False)
        else:
            lst2 = ["0","0","0","0"]
            bolst = [self.pa1_3,self.pa2_3,self.pa3_3,self.pa4_3]

            f = 0
                
            bo1 = 0
            bo1 = int(self.case_money_3.text())
            bo2 = math.ceil(float(bo1)*0.05)
            for i in range(4):
                if bolst[i].text().isdigit():
                    if bolst[i].text() == "":
                        lst2[i].setText("0")
                    elif bolst[i].text() != "":
                        a = bo2*(float(eval(bolst[i].text()))*0.01)
                        a = str("%.1f"%(a))
                        lst2[i] = a
                                
                else:
                    lst2[i] = "0"

            for i in range(4):
                if lst2[i] != "0":
                    x = lst2[i].split(".")
                    lst2[i] = x[1][0]
                        

            lst2 = list(map(int,lst2))
            for k in lst2:
                        f += k
            f = f/10
            f = Decimal(str(f)).quantize(Decimal('0'), ROUND_HALF_UP)
            f = int(f)

            if self.ch4_3.isChecked():
                self.bonus4_3.setText(str(math.floor(eval(self.bonus4_3.text())+f)))
                if self.bonus2_3.text() != "":
                    self.bonus2_3.setText(str(math.floor(eval(self.bonus2_3.text()))))
                if self.bonus3_3.text() != "":
                    self.bonus3_3.setText(str(math.floor(eval(self.bonus3_3.text()))))
                if self.bonus1_3.text() != "":
                    self.bonus1_3.setText(str(math.floor(eval(self.bonus1_3.text()))))
            else:
                self.bonus4_3.setText(str("%.1f"%(bo2*(float(eval(self.pa4_3.text()))*0.01))))
                if self.bonus2_3.text() != "":
                    self.bonus2_3.setText(str("%.1f"%(bo2*(float(eval(self.pa2_3.text()))*0.01))))
                if self.bonus3_3.text() != "":
                    self.bonus3_3.setText(str("%.1f"%(bo2*(float(eval(self.pa3_3.text()))*0.01))))
                if self.bonus1_3.text() != "":
                    self.bonus1_3.setText(str("%.1f"%(bo2*(float(eval(self.pa1_3.text()))*0.01))))


    def check1_4(self):
        
        if self.case_money_4.text() == "":
            self.ch1_4.setCheckable(False)
        else:
            lst2 = ["0","0","0","0"]
            bolst = [self.pa1_4,self.pa2_4,self.pa3_4,self.pa4_4]

            f = 0
                
            bo1 = 0
            bo1 = int(self.case_money_4.text())
            bo2 = math.ceil(float(bo1)*0.05)
            for i in range(4):
                if bolst[i].text().isdigit():
                    if bolst[i].text() == "":
                        lst2[i].setText("0")
                    elif bolst[i].text() != "":
                        a = bo2*(float(eval(bolst[i].text()))*0.01)
                        a = str("%.1f"%(a))
                        lst2[i] = a
                                
                else:
                    lst2[i] = "0"

            for i in range(4):
                if lst2[i] != "0":
                    x = lst2[i].split(".")
                    lst2[i] = x[1][0]
                        

            lst2 = list(map(int,lst2))
            for k in lst2:
                        f += k
            f = f/10
            f = Decimal(str(f)).quantize(Decimal('0'), ROUND_HALF_UP)
            f = int(f)
                

            if self.ch1_4.isChecked():
                self.bonus1_4.setText(str(math.floor(eval(self.bonus1_4.text())+f)))
                if self.bonus2_4.text() != "":
                    self.bonus2_4.setText(str(math.floor(eval(self.bonus2_4.text()))))
                if self.bonus3_4.text() != "":
                    self.bonus3_4.setText(str(math.floor(eval(self.bonus3_4.text()))))
                if self.bonus4_4.text() != "":
                    self.bonus4_4.setText(str(math.floor(eval(self.bonus4_4.text()))))
            else:
                self.bonus1_4.setText(str("%.1f"%(bo2*(float(eval(self.pa1_4.text()))*0.01))))
                if self.bonus2_4.text() != "":
                    self.bonus2_4.setText(str("%.1f"%(bo2*(float(eval(self.pa2_4.text()))*0.01))))
                if self.bonus3_4.text() != "":
                    self.bonus3_4.setText(str("%.1f"%(bo2*(float(eval(self.pa3_4.text()))*0.01))))
                if self.bonus4_4.text() != "":
                    self.bonus4_4.setText(str("%.1f"%(bo2*(float(eval(self.pa4_4.text()))*0.01))))

    def check2_4(self):
        
        if self.case_money_4.text() == "":
            self.ch2_4.setCheckable(False)
        else:
            lst2 = ["0","0","0","0"]
            bolst = [self.pa1_4,self.pa2_4,self.pa3_4,self.pa4_4]

            f = 0
                
            bo1 = 0
            bo1 = int(self.case_money_4.text())
            bo2 = math.ceil(float(bo1)*0.05)
            for i in range(4):
                if bolst[i].text().isdigit():
                    if bolst[i].text() == "":
                        lst2[i].setText("0")
                    elif bolst[i].text() != "":
                        a = bo2*(float(eval(bolst[i].text()))*0.01)
                        a = str("%.1f"%(a))
                        lst2[i] = a
                                
                else:
                    lst2[i] = "0"

            for i in range(4):
                if lst2[i] != "0":
                    x = lst2[i].split(".")
                    lst2[i] = x[1][0]
                        

            lst2 = list(map(int,lst2))
            for k in lst2:
                        f += k
            f = f/10
            f = Decimal(str(f)).quantize(Decimal('0'), ROUND_HALF_UP)
            f = int(f)
                
            if self.ch2_4.isChecked():
                self.bonus2_4.setText(str(math.floor(eval(self.bonus2_4.text())+f)))
                if self.bonus1_4.text() != "":
                    self.bonus1_4.setText(str(math.floor(eval(self.bonus1_4.text()))))
                if self.bonus3_4.text() != "":
                    self.bonus3_4.setText(str(math.floor(eval(self.bonus3_4.text()))))
                if self.bonus4_4.text() != "":
                    self.bonus4_4.setText(str(math.floor(eval(self.bonus4_4.text()))))
            else:
                self.bonus2_4.setText(str("%.1f"%(bo2*(float(eval(self.pa2_4.text()))*0.01))))
                if self.bonus1_4.text() != "":
                    self.bonus1_4.setText(str("%.1f"%(bo2*(float(eval(self.pa1_4.text()))*0.01))))
                if self.bonus3_4.text() != "":
                    self.bonus3_4.setText(str("%.1f"%(bo2*(float(eval(self.pa3_4.text()))*0.01))))
                if self.bonus4_4.text() != "":
                    self.bonus4_4.setText(str("%.1f"%(bo2*(float(eval(self.pa4_4.text()))*0.01))))

    def check3_4(self):
        
        if self.case_money_4.text() == "":
            self.ch3_4.setCheckable(False)
        else:
            lst2 = ["0","0","0","0"]
            bolst = [self.pa1_4,self.pa2_4,self.pa3_4,self.pa4_4]

            f = 0
                
            bo1 = 0
            bo1 = int(self.case_money_4.text())
            bo2 = math.ceil(float(bo1)*0.05)
            for i in range(4):
                if bolst[i].text().isdigit():
                    if bolst[i].text() == "":
                        lst2[i].setText("0")
                    elif bolst[i].text() != "":
                        a = bo2*(float(eval(bolst[i].text()))*0.01)
                        a = str("%.1f"%(a))
                        lst2[i] = a
                                
                else:
                    lst2[i] = "0"

            for i in range(4):
                if lst2[i] != "0":
                    x = lst2[i].split(".")
                    lst2[i] = x[1][0]
                        

            lst2 = list(map(int,lst2))
            for k in lst2:
                        f += k
            f = f/10
            f = Decimal(str(f)).quantize(Decimal('0'), ROUND_HALF_UP)
            f = int(f)

            if self.ch3_4.isChecked():
                self.bonus3_4.setText(str(math.floor(eval(self.bonus3_4.text())+f)))
                if self.bonus2_4.text() != "":
                    self.bonus2_4.setText(str(math.floor(eval(self.bonus2_4.text()))))
                if self.bonus1_4.text() != "":
                    self.bonus1_4.setText(str(math.floor(eval(self.bonus1_4.text()))))
                if self.bonus4_4.text() != "":
                    self.bonus4_4.setText(str(math.floor(eval(self.bonus4_4.text()))))
            else:
                self.bonus3_4.setText(str("%.1f"%(bo2*(float(eval(self.pa3_4.text()))*0.01))))
                if self.bonus2_4.text() != "":
                    self.bonus2_4.setText(str("%.1f"%(bo2*(float(eval(self.pa2_4.text()))*0.01))))
                if self.bonus1_4.text() != "":
                    self.bonus1_4.setText(str("%.1f"%(bo2*(float(eval(self.pa1_4.text()))*0.01))))
                if self.bonus4_4.text() != "":
                    self.bonus4_4.setText(str("%.1f"%(bo2*(float(eval(self.pa4_4.text()))*0.01))))

    def check4_4(self):
        
        if self.case_money_4.text() == "":
            self.ch4_4.setCheckable(False)
        else:
            lst2 = ["0","0","0","0"]
            bolst = [self.pa1_4,self.pa2_4,self.pa3_4,self.pa4_4]

            f = 0
                
            bo1 = 0
            bo1 = int(self.case_money_4.text())
            bo2 = math.ceil(float(bo1)*0.05)
            for i in range(4):
                if bolst[i].text().isdigit():
                    if bolst[i].text() == "":
                        lst2[i].setText("0")
                    elif bolst[i].text() != "":
                        a = bo2*(float(eval(bolst[i].text()))*0.01)
                        a = str("%.1f"%(a))
                        lst2[i] = a
                                
                else:
                    lst2[i] = "0"

            for i in range(4):
                if lst2[i] != "0":
                    x = lst2[i].split(".")
                    lst2[i] = x[1][0]
                        

            lst2 = list(map(int,lst2))
            for k in lst2:
                        f += k
            f = f/10
            f = Decimal(str(f)).quantize(Decimal('0'), ROUND_HALF_UP)
            f = int(f)

            if self.ch4_4.isChecked():
                self.bonus4_4.setText(str(math.floor(eval(self.bonus4_4.text())+f)))
                if self.bonus2_4.text() != "":
                    self.bonus2_4.setText(str(math.floor(eval(self.bonus2_4.text()))))
                if self.bonus3_4.text() != "":
                    self.bonus3_4.setText(str(math.floor(eval(self.bonus3_4.text()))))
                if self.bonus1_4.text() != "":
                    self.bonus1_4.setText(str(math.floor(eval(self.bonus1_4.text()))))
            else:
                self.bonus4_4.setText(str("%.1f"%(bo2*(float(eval(self.pa4_4.text()))*0.01))))
                if self.bonus2_4.text() != "":
                    self.bonus2_4.setText(str("%.1f"%(bo2*(float(eval(self.pa2_4.text()))*0.01))))
                if self.bonus3_4.text() != "":
                    self.bonus3_4.setText(str("%.1f"%(bo2*(float(eval(self.pa3_4.text()))*0.01))))
                if self.bonus1_4.text() != "":
                    self.bonus1_4.setText(str("%.1f"%(bo2*(float(eval(self.pa1_4.text()))*0.01))))


    def check1_5(self):
        
        if self.case_money_5.text() == "":
            self.ch1_5.setCheckable(False)
        else:
            lst2 = ["0","0","0","0"]
            bolst = [self.pa1_5,self.pa2_5,self.pa3_5,self.pa4_5]

            f = 0
                
            bo1 = 0
            bo1 = int(self.case_money_5.text())
            bo2 = math.ceil(float(bo1)*0.05)
            for i in range(4):
                if bolst[i].text().isdigit():
                    if bolst[i].text() == "":
                        lst2[i].setText("0")
                    elif bolst[i].text() != "":
                        a = bo2*(float(eval(bolst[i].text()))*0.01)
                        a = str("%.1f"%(a))
                        lst2[i] = a
                                
                else:
                    lst2[i] = "0"

            for i in range(4):
                if lst2[i] != "0":
                    x = lst2[i].split(".")
                    lst2[i] = x[1][0]
                        

            lst2 = list(map(int,lst2))
            for k in lst2:
                        f += k
            f = f/10
            f = Decimal(str(f)).quantize(Decimal('0'), ROUND_HALF_UP)
            f = int(f)
                

            if self.ch1_5.isChecked():
                self.bonus1_5.setText(str(math.floor(eval(self.bonus1_5.text())+f)))
                if self.bonus2_5.text() != "":
                    self.bonus2_5.setText(str(math.floor(eval(self.bonus2_5.text()))))
                if self.bonus3_5.text() != "":
                    self.bonus3_5.setText(str(math.floor(eval(self.bonus3_5.text()))))
                if self.bonus4_5.text() != "":
                    self.bonus4_5.setText(str(math.floor(eval(self.bonus4_5.text()))))
            else:
                self.bonus1_5.setText(str("%.1f"%(bo2*(float(eval(self.pa1_5.text()))*0.01))))
                if self.bonus2_5.text() != "":
                    self.bonus2_5.setText(str("%.1f"%(bo2*(float(eval(self.pa2_5.text()))*0.01))))
                if self.bonus3_5.text() != "":
                    self.bonus3_5.setText(str("%.1f"%(bo2*(float(eval(self.pa3_5.text()))*0.01))))
                if self.bonus4_5.text() != "":
                    self.bonus4_5.setText(str("%.1f"%(bo2*(float(eval(self.pa4_5.text()))*0.01))))

    def check2_5(self):
        
        if self.case_money_5.text() == "":
            self.ch2_5.setCheckable(False)
        else:
            lst2 = ["0","0","0","0"]
            bolst = [self.pa1_5,self.pa2_5,self.pa3_5,self.pa4_5]

            f = 0
                
            bo1 = 0
            bo1 = int(self.case_money_5.text())
            bo2 = math.ceil(float(bo1)*0.05)
            for i in range(4):
                if bolst[i].text().isdigit():
                    if bolst[i].text() == "":
                        lst2[i].setText("0")
                    elif bolst[i].text() != "":
                        a = bo2*(float(eval(bolst[i].text()))*0.01)
                        a = str("%.1f"%(a))
                        lst2[i] = a
                                
                else:
                    lst2[i] = "0"

            for i in range(4):
                if lst2[i] != "0":
                    x = lst2[i].split(".")
                    lst2[i] = x[1][0]
                        

            lst2 = list(map(int,lst2))
            for k in lst2:
                        f += k
            f = f/10
            f = Decimal(str(f)).quantize(Decimal('0'), ROUND_HALF_UP)
            f = int(f)
                
            if self.ch2_5.isChecked():
                self.bonus2_5.setText(str(math.floor(eval(self.bonus2_5.text())+f)))
                if self.bonus1_5.text() != "":
                    self.bonus1_5.setText(str(math.floor(eval(self.bonus1_5.text()))))
                if self.bonus3_5.text() != "":
                    self.bonus3_5.setText(str(math.floor(eval(self.bonus3_5.text()))))
                if self.bonus4_5.text() != "":
                    self.bonus4_5.setText(str(math.floor(eval(self.bonus4_5.text()))))
            else:
                self.bonus2_5.setText(str("%.1f"%(bo2*(float(eval(self.pa2_5.text()))*0.01))))
                if self.bonus1_5.text() != "":
                    self.bonus1_5.setText(str("%.1f"%(bo2*(float(eval(self.pa1_5.text()))*0.01))))
                if self.bonus3_5.text() != "":
                    self.bonus3_5.setText(str("%.1f"%(bo2*(float(eval(self.pa3_5.text()))*0.01))))
                if self.bonus4_5.text() != "":
                    self.bonus4_5.setText(str("%.1f"%(bo2*(float(eval(self.pa4_5.text()))*0.01))))

    def check3_5(self):
        
        if self.case_money_5.text() == "":
            self.ch3_5.setCheckable(False)
        else:
            lst2 = ["0","0","0","0"]
            bolst = [self.pa1_5,self.pa2_5,self.pa3_5,self.pa4_5]

            f = 0
                
            bo1 = 0
            bo1 = int(self.case_money_5.text())
            bo2 = math.ceil(float(bo1)*0.05)
            for i in range(4):
                if bolst[i].text().isdigit():
                    if bolst[i].text() == "":
                        lst2[i].setText("0")
                    elif bolst[i].text() != "":
                        a = bo2*(float(eval(bolst[i].text()))*0.01)
                        a = str("%.1f"%(a))
                        lst2[i] = a
                                
                else:
                    lst2[i] = "0"

            for i in range(4):
                if lst2[i] != "0":
                    x = lst2[i].split(".")
                    lst2[i] = x[1][0]
                        

            lst2 = list(map(int,lst2))
            for k in lst2:
                        f += k
            f = f/10
            f = Decimal(str(f)).quantize(Decimal('0'), ROUND_HALF_UP)
            f = int(f)

            if self.ch3_5.isChecked():
                self.bonus3_5.setText(str(math.floor(eval(self.bonus3_5.text())+f)))
                if self.bonus2_5.text() != "":
                    self.bonus2_5.setText(str(math.floor(eval(self.bonus2_5.text()))))
                if self.bonus1_5.text() != "":
                    self.bonus1_5.setText(str(math.floor(eval(self.bonus1_5.text()))))
                if self.bonus4_5.text() != "":
                    self.bonus4_5.setText(str(math.floor(eval(self.bonus4_5.text()))))
            else:
                self.bonus3_5.setText(str("%.1f"%(bo2*(float(eval(self.pa3_5.text()))*0.01))))
                if self.bonus2_5.text() != "":
                    self.bonus2_5.setText(str("%.1f"%(bo2*(float(eval(self.pa2_5.text()))*0.01))))
                if self.bonus1_5.text() != "":
                    self.bonus1_5.setText(str("%.1f"%(bo2*(float(eval(self.pa1_5.text()))*0.01))))
                if self.bonus4_5.text() != "":
                    self.bonus4_5.setText(str("%.1f"%(bo2*(float(eval(self.pa4_5.text()))*0.01))))

    def check4_5(self):
        
        if self.case_money_5.text() == "":
            self.ch4_5.setCheckable(False)
        else:
            lst2 = ["0","0","0","0"]
            bolst = [self.pa1_5,self.pa2_5,self.pa3_5,self.pa4_5]

            f = 0
                
            bo1 = 0
            bo1 = int(self.case_money_5.text())
            bo2 = math.ceil(float(bo1)*0.05)
            for i in range(4):
                if bolst[i].text().isdigit():
                    if bolst[i].text() == "":
                        lst2[i].setText("0")
                    elif bolst[i].text() != "":
                        a = bo2*(float(eval(bolst[i].text()))*0.01)
                        a = str("%.1f"%(a))
                        lst2[i] = a
                                
                else:
                    lst2[i] = "0"

            for i in range(4):
                if lst2[i] != "0":
                    x = lst2[i].split(".")
                    lst2[i] = x[1][0]
                        

            lst2 = list(map(int,lst2))
            for k in lst2:
                        f += k
            f = f/10
            f = Decimal(str(f)).quantize(Decimal('0'), ROUND_HALF_UP)
            f = int(f)

            if self.ch4_5.isChecked():
                self.bonus4_5.setText(str(math.floor(eval(self.bonus4_5.text())+f)))
                if self.bonus2_5.text() != "":
                    self.bonus2_5.setText(str(math.floor(eval(self.bonus2_5.text()))))
                if self.bonus3_5.text() != "":
                    self.bonus3_5.setText(str(math.floor(eval(self.bonus3_5.text()))))
                if self.bonus1_5.text() != "":
                    self.bonus1_5.setText(str(math.floor(eval(self.bonus1_5.text()))))
            else:
                self.bonus4_5.setText(str("%.1f"%(bo2*(float(eval(self.pa4_5.text()))*0.01))))
                if self.bonus2_5.text() != "":
                    self.bonus2_5.setText(str("%.1f"%(bo2*(float(eval(self.pa2_5.text()))*0.01))))
                if self.bonus3_5.text() != "":
                    self.bonus3_5.setText(str("%.1f"%(bo2*(float(eval(self.pa3_5.text()))*0.01))))
                if self.bonus1_5.text() != "":
                    self.bonus1_5.setText(str("%.1f"%(bo2*(float(eval(self.pa1_5.text()))*0.01))))


    def check1_6(self):
        
        if self.case_money_6.text() == "":
            self.ch1_6.setCheckable(False)
        else:
            lst2 = ["0","0","0","0"]
            bolst = [self.pa1_6,self.pa2_6,self.pa3_6,self.pa4_6]

            f = 0
                
            bo1 = 0
            bo1 = int(self.case_money_6.text())
            bo2 = math.ceil(float(bo1)*0.05)
            for i in range(4):
                if bolst[i].text().isdigit():
                    if bolst[i].text() == "":
                        lst2[i].setText("0")
                    elif bolst[i].text() != "":
                        a = bo2*(float(eval(bolst[i].text()))*0.01)
                        a = str("%.1f"%(a))
                        lst2[i] = a
                                
                else:
                    lst2[i] = "0"

            for i in range(4):
                if lst2[i] != "0":
                    x = lst2[i].split(".")
                    lst2[i] = x[1][0]
                        

            lst2 = list(map(int,lst2))
            for k in lst2:
                        f += k
            f = f/10
            f = Decimal(str(f)).quantize(Decimal('0'), ROUND_HALF_UP)
            f = int(f)
                

            if self.ch1_6.isChecked():
                self.bonus1_6.setText(str(math.floor(eval(self.bonus1_6.text())+f)))
                if self.bonus2_6.text() != "":
                    self.bonus2_6.setText(str(math.floor(eval(self.bonus2_6.text()))))
                if self.bonus3_6.text() != "":
                    self.bonus3_6.setText(str(math.floor(eval(self.bonus3_6.text()))))
                if self.bonus4_6.text() != "":
                    self.bonus4_6.setText(str(math.floor(eval(self.bonus4_6.text()))))
            else:
                self.bonus1_6.setText(str("%.1f"%(bo2*(float(eval(self.pa1_6.text()))*0.01))))
                if self.bonus2_6.text() != "":
                    self.bonus2_6.setText(str("%.1f"%(bo2*(float(eval(self.pa2_6.text()))*0.01))))
                if self.bonus3_6.text() != "":
                    self.bonus3_6.setText(str("%.1f"%(bo2*(float(eval(self.pa3_6.text()))*0.01))))
                if self.bonus4_6.text() != "":
                    self.bonus4_6.setText(str("%.1f"%(bo2*(float(eval(self.pa4_6.text()))*0.01))))

    def check2_6(self):
        
        if self.case_money_6.text() == "":
            self.ch2_6.setCheckable(False)
        else:
            lst2 = ["0","0","0","0"]
            bolst = [self.pa1_6,self.pa2_6,self.pa3_6,self.pa4_6]

            f = 0
                
            bo1 = 0
            bo1 = int(self.case_money_6.text())
            bo2 = math.ceil(float(bo1)*0.05)
            for i in range(4):
                if bolst[i].text().isdigit():
                    if bolst[i].text() == "":
                        lst2[i].setText("0")
                    elif bolst[i].text() != "":
                        a = bo2*(float(eval(bolst[i].text()))*0.01)
                        a = str("%.1f"%(a))
                        lst2[i] = a
                                
                else:
                    lst2[i] = "0"

            for i in range(4):
                if lst2[i] != "0":
                    x = lst2[i].split(".")
                    lst2[i] = x[1][0]
                        

            lst2 = list(map(int,lst2))
            for k in lst2:
                        f += k
            f = f/10
            f = Decimal(str(f)).quantize(Decimal('0'), ROUND_HALF_UP)
            f = int(f)
                
            if self.ch2_6.isChecked():
                self.bonus2_6.setText(str(math.floor(eval(self.bonus2_6.text())+f)))
                if self.bonus1_6.text() != "":
                    self.bonus1_6.setText(str(math.floor(eval(self.bonus1_6.text()))))
                if self.bonus3_6.text() != "":
                    self.bonus3_6.setText(str(math.floor(eval(self.bonus3_6.text()))))
                if self.bonus4_6.text() != "":
                    self.bonus4_6.setText(str(math.floor(eval(self.bonus4_6.text()))))
            else:
                self.bonus2_6.setText(str("%.1f"%(bo2*(float(eval(self.pa2_6.text()))*0.01))))
                if self.bonus1_6.text() != "":
                    self.bonus1_6.setText(str("%.1f"%(bo2*(float(eval(self.pa1_6.text()))*0.01))))
                if self.bonus3_6.text() != "":
                    self.bonus3_6.setText(str("%.1f"%(bo2*(float(eval(self.pa3_6.text()))*0.01))))
                if self.bonus4_6.text() != "":
                    self.bonus4_6.setText(str("%.1f"%(bo2*(float(eval(self.pa4_6.text()))*0.01))))

    def check3_6(self):
        
        if self.case_money_6.text() == "":
            self.ch3_6.setCheckable(False)
        else:
            lst2 = ["0","0","0","0"]
            bolst = [self.pa1_6,self.pa2_6,self.pa3_6,self.pa4_6]

            f = 0
                
            bo1 = 0
            bo1 = int(self.case_money_6.text())
            bo2 = math.ceil(float(bo1)*0.05)
            for i in range(4):
                if bolst[i].text().isdigit():
                    if bolst[i].text() == "":
                        lst2[i].setText("0")
                    elif bolst[i].text() != "":
                        a = bo2*(float(eval(bolst[i].text()))*0.01)
                        a = str("%.1f"%(a))
                        lst2[i] = a
                                
                else:
                    lst2[i] = "0"

            for i in range(4):
                if lst2[i] != "0":
                    x = lst2[i].split(".")
                    lst2[i] = x[1][0]
                        

            lst2 = list(map(int,lst2))
            for k in lst2:
                        f += k
            f = f/10
            f = Decimal(str(f)).quantize(Decimal('0'), ROUND_HALF_UP)
            f = int(f)

            if self.ch3_6.isChecked():
                self.bonus3_6.setText(str(math.floor(eval(self.bonus3_6.text())+f)))
                if self.bonus2_6.text() != "":
                    self.bonus2_6.setText(str(math.floor(eval(self.bonus2_6.text()))))
                if self.bonus1_6.text() != "":
                    self.bonus1_6.setText(str(math.floor(eval(self.bonus1_6.text()))))
                if self.bonus4_6.text() != "":
                    self.bonus4_6.setText(str(math.floor(eval(self.bonus4_6.text()))))
            else:
                self.bonus3_6.setText(str("%.1f"%(bo2*(float(eval(self.pa3_6.text()))*0.01))))
                if self.bonus2_6.text() != "":
                    self.bonus2_6.setText(str("%.1f"%(bo2*(float(eval(self.pa2_6.text()))*0.01))))
                if self.bonus1_6.text() != "":
                    self.bonus1_6.setText(str("%.1f"%(bo2*(float(eval(self.pa1_6.text()))*0.01))))
                if self.bonus4_6.text() != "":
                    self.bonus4_6.setText(str("%.1f"%(bo2*(float(eval(self.pa4_6.text()))*0.01))))

    def check4_6(self):
        
        if self.case_money_6.text() == "":
            self.ch4_6.setCheckable(False)
        else:
            lst2 = ["0","0","0","0"]
            bolst = [self.pa1_6,self.pa2_6,self.pa3_6,self.pa4_6]

            f = 0
                
            bo1 = 0
            bo1 = int(self.case_money_6.text())
            bo2 = math.ceil(float(bo1)*0.05)
            for i in range(4):
                if bolst[i].text().isdigit():
                    if bolst[i].text() == "":
                        lst2[i].setText("0")
                    elif bolst[i].text() != "":
                        a = bo2*(float(eval(bolst[i].text()))*0.01)
                        a = str("%.1f"%(a))
                        lst2[i] = a
                                
                else:
                    lst2[i] = "0"

            for i in range(4):
                if lst2[i] != "0":
                    x = lst2[i].split(".")
                    lst2[i] = x[1][0]
                        

            lst2 = list(map(int,lst2))
            for k in lst2:
                        f += k
            f = f/10
            f = Decimal(str(f)).quantize(Decimal('0'), ROUND_HALF_UP)
            f = int(f)

            if self.ch4_6.isChecked():
                self.bonus4_6.setText(str(math.floor(eval(self.bonus4_6.text())+f)))
                if self.bonus2_6.text() != "":
                    self.bonus2_6.setText(str(math.floor(eval(self.bonus2_6.text()))))
                if self.bonus3_6.text() != "":
                    self.bonus3_6.setText(str(math.floor(eval(self.bonus3_6.text()))))
                if self.bonus1_6.text() != "":
                    self.bonus1_6.setText(str(math.floor(eval(self.bonus1_6.text()))))
            else:
                self.bonus4_6.setText(str("%.1f"%(bo2*(float(eval(self.pa4_6.text()))*0.01))))
                if self.bonus2_6.text() != "":
                    self.bonus2_6.setText(str("%.1f"%(bo2*(float(eval(self.pa2_6.text()))*0.01))))
                if self.bonus3_6.text() != "":
                    self.bonus3_6.setText(str("%.1f"%(bo2*(float(eval(self.pa3_6.text()))*0.01))))
                if self.bonus1_6.text() != "":
                    self.bonus1_6.setText(str("%.1f"%(bo2*(float(eval(self.pa1_6.text()))*0.01))))

    def cl_cant_1(self):
        
        if self.case_money.text().isdigit():
            lst = [self.pa1,self.pa2,self.pa3,self.pa4,self.bonus1,self.bonus2,self.bonus3,self.bonus4,self.whole_bonus,self.leader_bonus]
            if self.case_money.text() == "":
                for i in range(len(lst)):
                    lst[i].setText("")
            else:

                lst2 = ["0","0","0","0"]
                bolst = [self.pa1,self.pa2,self.pa3,self.pa4]
                
                f = 0
                
                bo1 = 0
                bo1 = int(self.case_money.text())
                bo2 = math.ceil(float(bo1)*0.05)

                for i in range(4):
                            if bolst[i].text().isdigit():
                                if bolst[i].text() == "":
                                    lst2[i].setText("0")
                                elif bolst[i].text() != "":
                                    a = bo2*(float(eval(bolst[i].text()))*0.01)
                                    a = str("%.1f"%(a))
                                    lst2[i] = a        
                            else:
                                lst2[i] = "0"

                for i in range(4):
                        if lst2[i] != "0":
                            x = lst2[i].split(".")
                            lst2[i] = x[1][0]
                        
                lst2 = list(map(int,lst2))
                for k in lst2:
                    f += k

                if f == 0:
                    self.ch1.setCheckable(False)
                    self.ch2.setCheckable(False)
                    self.ch3.setCheckable(False)
                    self.ch4.setCheckable(False)
                else:
                    self.ch1.setCheckable(True)
                    self.ch2.setCheckable(True)
                    self.ch3.setCheckable(True)
                    self.ch4.setCheckable(True)
                
                if self.pa1.text() == "":
                    self.ch1.setCheckable(False)
                if self.pa2.text() == "":
                    self.ch2.setCheckable(False)              
                if self.pa3.text() == "":
                    self.ch3.setCheckable(False)         
                if self.pa4.text() == "":
                    self.ch4.setCheckable(False)
                
    def cl_cant_2(self):
        
        if self.case_money_2.text().isdigit():
            lst = [self.pa1_2,self.pa2_2,self.pa3_2,self.pa4_2,self.bonus1_2,self.bonus2_2,self.bonus3_2,self.bonus4_2,self.whole_bonus_2,self.leader_bonus_2]
            if self.case_money_2.text() == "":
                for i in range(len(lst)):
                    lst[i].setText("")
            else:

                lst2 = ["0","0","0","0"]
                bolst = [self.pa1_2,self.pa2_2,self.pa3_2,self.pa4_2]
                
                f = 0
                
                bo1 = 0
                bo1 = int(self.case_money_2.text())
                bo2 = math.ceil(float(bo1)*0.05)

                for i in range(4):
                            if bolst[i].text().isdigit():
                                if bolst[i].text() == "":
                                    lst2[i].setText("0")
                                elif bolst[i].text() != "":
                                    a = bo2*(float(eval(bolst[i].text()))*0.01)
                                    a = str("%.1f"%(a))
                                    lst2[i] = a        
                            else:
                                lst2[i] = "0"

                for i in range(4):
                        if lst2[i] != "0":
                            x = lst2[i].split(".")
                            lst2[i] = x[1][0]
                        
                lst2 = list(map(int,lst2))
                for k in lst2:
                    f += k

                if f == 0:
                    self.ch1_2.setCheckable(False)
                    self.ch2_2.setCheckable(False)
                    self.ch3_2.setCheckable(False)
                    self.ch4_2.setCheckable(False)
                else:
                    self.ch1_2.setCheckable(True)
                    self.ch2_2.setCheckable(True)
                    self.ch3_2.setCheckable(True)
                    self.ch4_2.setCheckable(True)
                
                if self.pa1_2.text() == "":
                    self.ch1_2.setCheckable(False)
                if self.pa2_2.text() == "":
                    self.ch2_2.setCheckable(False)              
                if self.pa3_2.text() == "":
                    self.ch3_2.setCheckable(False)         
                if self.pa4_2.text() == "":
                    self.ch4_2.setCheckable(False)

    def cl_cant_3(self):
        
        if self.case_money_3.text().isdigit():
            lst = [self.pa1_3,self.pa2_3,self.pa3_3,self.pa4_3,self.bonus1_3,self.bonus2_3,self.bonus3_3,self.bonus4_3,self.whole_bonus_3,self.leader_bonus_3]
            if self.case_money_3.text() == "":
                for i in range(len(lst)):
                    lst[i].setText("")
            else:

                lst2 = ["0","0","0","0"]
                bolst = [self.pa1_3,self.pa2_3,self.pa3_3,self.pa4_3]
                
                f = 0
                
                bo1 = 0
                bo1 = int(self.case_money_3.text())
                bo2 = math.ceil(float(bo1)*0.05)

                for i in range(4):
                            if bolst[i].text().isdigit():
                                if bolst[i].text() == "":
                                    lst2[i].setText("0")
                                elif bolst[i].text() != "":
                                    a = bo2*(float(eval(bolst[i].text()))*0.01)
                                    a = str("%.1f"%(a))
                                    lst2[i] = a        
                            else:
                                lst2[i] = "0"

                for i in range(4):
                        if lst2[i] != "0":
                            x = lst2[i].split(".")
                            lst2[i] = x[1][0]
                        
                lst2 = list(map(int,lst2))
                for k in lst2:
                    f += k

                if f == 0:
                    self.ch1_3.setCheckable(False)
                    self.ch2_3.setCheckable(False)
                    self.ch3_3.setCheckable(False)
                    self.ch4_3.setCheckable(False)
                else:
                    self.ch1_3.setCheckable(True)
                    self.ch2_3.setCheckable(True)
                    self.ch3_3.setCheckable(True)
                    self.ch4_3.setCheckable(True)
                
                if self.pa1_3.text() == "":
                    self.ch1_3.setCheckable(False)
                if self.pa2_3.text() == "":
                    self.ch2_3.setCheckable(False)              
                if self.pa3_3.text() == "":
                    self.ch3_3.setCheckable(False)         
                if self.pa4_3.text() == "":
                    self.ch4_3.setCheckable(False)

    def cl_cant_4(self):
        
        if self.case_money_4.text().isdigit():
            lst = [self.pa1_4,self.pa2_4,self.pa3_4,self.pa4_4,self.bonus1_4,self.bonus2_4,self.bonus3_4,self.bonus4_4,self.whole_bonus_4,self.leader_bonus_4]
            if self.case_money_4.text() == "":
                for i in range(len(lst)):
                    lst[i].setText("")
            else:

                lst2 = ["0","0","0","0"]
                bolst = [self.pa1_4,self.pa2_4,self.pa3_4,self.pa4_4]
                
                f = 0
                
                bo1 = 0
                bo1 = int(self.case_money_4.text())
                bo2 = math.ceil(float(bo1)*0.05)

                for i in range(4):
                            if bolst[i].text().isdigit():
                                if bolst[i].text() == "":
                                    lst2[i].setText("0")
                                elif bolst[i].text() != "":
                                    a = bo2*(float(eval(bolst[i].text()))*0.01)
                                    a = str("%.1f"%(a))
                                    lst2[i] = a        
                            else:
                                lst2[i] = "0"

                for i in range(4):
                        if lst2[i] != "0":
                            x = lst2[i].split(".")
                            lst2[i] = x[1][0]
                        
                lst2 = list(map(int,lst2))
                for k in lst2:
                    f += k

                if f == 0:
                    self.ch1_4.setCheckable(False)
                    self.ch2_4.setCheckable(False)
                    self.ch3_4.setCheckable(False)
                    self.ch4_4.setCheckable(False)
                else:
                    self.ch1_4.setCheckable(True)
                    self.ch2_4.setCheckable(True)
                    self.ch3_4.setCheckable(True)
                    self.ch4_4.setCheckable(True)
                
                if self.pa1_4.text() == "":
                    self.ch1_4.setCheckable(False)
                if self.pa2_4.text() == "":
                    self.ch2_4.setCheckable(False)              
                if self.pa3_4.text() == "":
                    self.ch3_4.setCheckable(False)         
                if self.pa4_4.text() == "":
                    self.ch4_4.setCheckable(False)

    def cl_cant_5(self):
        
        if self.case_money_5.text().isdigit():
            lst = [self.pa1_5,self.pa2_5,self.pa3_5,self.pa4_5,self.bonus1_5,self.bonus2_5,self.bonus3_5,self.bonus4_5,self.whole_bonus_5,self.leader_bonus_5]
            if self.case_money_5.text() == "":
                for i in range(len(lst)):
                    lst[i].setText("")
            else:

                lst2 = ["0","0","0","0"]
                bolst = [self.pa1_5,self.pa2_5,self.pa3_5,self.pa4_5]
                
                f = 0
                
                bo1 = 0
                bo1 = int(self.case_money_5.text())
                bo2 = math.ceil(float(bo1)*0.05)

                for i in range(4):
                            if bolst[i].text().isdigit():
                                if bolst[i].text() == "":
                                    lst2[i].setText("0")
                                elif bolst[i].text() != "":
                                    a = bo2*(float(eval(bolst[i].text()))*0.01)
                                    a = str("%.1f"%(a))
                                    lst2[i] = a        
                            else:
                                lst2[i] = "0"

                for i in range(4):
                        if lst2[i] != "0":
                            x = lst2[i].split(".")
                            lst2[i] = x[1][0]
                        
                lst2 = list(map(int,lst2))
                for k in lst2:
                    f += k

                if f == 0:
                    self.ch1_5.setCheckable(False)
                    self.ch2_5.setCheckable(False)
                    self.ch3_5.setCheckable(False)
                    self.ch4_5.setCheckable(False)
                else:
                    self.ch1_5.setCheckable(True)
                    self.ch2_5.setCheckable(True)
                    self.ch3_5.setCheckable(True)
                    self.ch4_5.setCheckable(True)
                
                if self.pa1_5.text() == "":
                    self.ch1_5.setCheckable(False)
                if self.pa2_5.text() == "":
                    self.ch2_5.setCheckable(False)              
                if self.pa3_5.text() == "":
                    self.ch3_5.setCheckable(False)         
                if self.pa4_5.text() == "":
                    self.ch4_5.setCheckable(False)

    def cl_cant_6(self):
        
        if self.case_money_6.text().isdigit():
            lst = [self.pa1_6,self.pa2_6,self.pa3_6,self.pa4_6,self.bonus1_6,self.bonus2_6,self.bonus3_6,self.bonus4_6,self.whole_bonus_6,self.leader_bonus_6]
            if self.case_money_6.text() == "":
                for i in range(len(lst)):
                    lst[i].setText("")
            else:

                lst2 = ["0","0","0","0"]
                bolst = [self.pa1_6,self.pa2_6,self.pa3_6,self.pa4_6]
                
                f = 0
                
                bo1 = 0
                bo1 = int(self.case_money_6.text())
                bo2 = math.ceil(float(bo1)*0.05)

                for i in range(4):
                            if bolst[i].text().isdigit():
                                if bolst[i].text() == "":
                                    lst2[i].setText("0")
                                elif bolst[i].text() != "":
                                    a = bo2*(float(eval(bolst[i].text()))*0.01)
                                    a = str("%.1f"%(a))
                                    lst2[i] = a        
                            else:
                                lst2[i] = "0"

                for i in range(4):
                        if lst2[i] != "0":
                            x = lst2[i].split(".")
                            lst2[i] = x[1][0]
                        
                lst2 = list(map(int,lst2))
                for k in lst2:
                    f += k

                if f == 0:
                    self.ch1_6.setCheckable(False)
                    self.ch2_6.setCheckable(False)
                    self.ch3_6.setCheckable(False)
                    self.ch4_6.setCheckable(False)
                else:
                    self.ch1_6.setCheckable(True)
                    self.ch2_6.setCheckable(True)
                    self.ch3_6.setCheckable(True)
                    self.ch4_6.setCheckable(True)
                
                if self.pa1_6.text() == "":
                    self.ch1_6.setCheckable(False)
                if self.pa2_6.text() == "":
                    self.ch2_6.setCheckable(False)              
                if self.pa3_6.text() == "":
                    self.ch3_6.setCheckable(False)         
                if self.pa4_6.text() == "":
                    self.ch4_6.setCheckable(False)


    def mate1_sum(self):
        sum = 0
        lst2 = ["0","0","0","0","0","0"]
        
        a = 0
        b = 0
        c = 0
        d = 0
        e = 0
        f = 0

        bolst = [self.pa2,self.pa2_2,self.pa2_3,self.pa2_4,self.pa2_5,self.pa2_6]
        bolst2 = [self.bonus2,self.bonus2_2,self.bonus2_3,self.bonus2_4,self.bonus2_5,self.bonus2_6]
        bolst3 = [a,b,c,d,e,f]
        bolst4 = [self.case_money,self.case_money_2,self.case_money_3,self.case_money_4,self.case_money_5,self.case_money_6]


        for i in range(6):
            if bolst4[i].text() != "":
                if bolst[i].text().isdigit():
                    if bolst[i].text() == "":
                        bolst2[i].setText("")
                    elif bolst[i].text() != "":
                        bolst3[i] = eval(bolst2[i].text())
                        lst2[i] = bolst3[i]
                else:
                    # bolst2[i].setText("")
                    lst2[i] = "0"
            else:
                lst2[i] = "0"

        lst2 = list(map(int,lst2))
        for k in lst2:
            sum += k
        if sum == 0:
            self.mate1_whole_bonus.setText("0")
        else:
            self.mate1_whole_bonus.setText(str(sum))

    def mate2_sum(self):
        sum = 0
        lst2 = ["0","0","0","0","0","0"]
        
        a = 0
        b = 0
        c = 0
        d = 0
        e = 0
        f = 0

        bolst = [self.pa3,self.pa3_2,self.pa3_3,self.pa3_4,self.pa3_5,self.pa3_6]
        bolst2 = [self.bonus3,self.bonus3_2,self.bonus3_3,self.bonus3_4,self.bonus3_5,self.bonus3_6]
        bolst3 = [a,b,c,d,e,f]
        bolst4 = [self.case_money,self.case_money_2,self.case_money_3,self.case_money_4,self.case_money_5,self.case_money_6]

        for i in range(6):
            if bolst4[i].text() != "":
                if bolst[i].text().isdigit():
                    if bolst[i].text() == "":
                        bolst2[i].setText("")
                    elif bolst[i].text() != "":
                        bolst3[i] = eval(bolst2[i].text())
                        lst2[i] = bolst3[i]
                else:
                    # bolst2[i].setText("")
                    lst2[i] = "0"
            else:
                lst2[i] = "0"

        lst2 = list(map(int,lst2))
        for k in lst2:
            sum += k
        if sum == 0:
            self.mate2_whole_bonus.setText("0")
        else:
            self.mate2_whole_bonus.setText(str(sum))

    def mate3_sum(self):
        sum = 0
        lst2 = ["0","0","0","0","0","0"]
        
        a = 0
        b = 0
        c = 0
        d = 0
        e = 0
        f = 0

        bolst = [self.pa4,self.pa4_2,self.pa4_3,self.pa4_4,self.pa4_5,self.pa4_6]
        bolst2 = [self.bonus4,self.bonus4_2,self.bonus4_3,self.bonus4_4,self.bonus4_5,self.bonus4_6]
        bolst3 = [a,b,c,d,e,f]
        bolst4 = [self.case_money,self.case_money_2,self.case_money_3,self.case_money_4,self.case_money_5,self.case_money_6]

        for i in range(6):
            if bolst4[i].text() != "":
                if bolst[i].text().isdigit():
                    if bolst[i].text() == "":
                        bolst2[i].setText("")
                    elif bolst[i].text() != "":
                        bolst3[i] = eval(bolst2[i].text())
                        lst2[i] = bolst3[i]
                else:
                    # bolst2[i].setText("")
                    lst2[i] = "0"
            else:
                lst2[i] = "0"

        lst2 = list(map(int,lst2))
        for k in lst2:
            sum += k
        if sum == 0:
            self.mate3_whole_bonus.setText("0")
        else:
            self.mate3_whole_bonus.setText(str(sum))

    def leader_sum(self):
        sum = 0
        lst2 = ["0","0","0","0","0","0","0","0","0","0","0","0"]
        
        a = 0
        b = 0
        c = 0
        d = 0
        e = 0
        f = 0
        m = 0
        n = 0
        o = 0
        p = 0
        q = 0
        r = 0

        bolst = [self.pa1,self.pa1_2,self.pa1_3,self.pa1_4,self.pa1_5,self.pa1_6]
        bolst2 = [self.bonus1,self.bonus1_2,self.bonus1_3,self.bonus1_4,self.bonus1_5,self.bonus1_6]
        bolst3 = [a,b,c,d,e,f]
        lst_l = [self.case_money,self.case_money_2,self.case_money_3,self.case_money_4,self.case_money_5,self.case_money_6]
        lst_l2 = [self.leader_bonus,self.leader_bonus_2,self.leader_bonus_3,self.leader_bonus_4,self.leader_bonus_5,self.leader_bonus_6]
        lst_l3 = [m,n,o,p,q,r]

        for i in range(6):
            if lst_l[i].text() != "":
                if bolst[i].text().isdigit():
                    if bolst[i].text() == "":
                        bolst2[i].setText("")
                    elif bolst[i].text() != "":
                        bolst3[i] = eval(bolst2[i].text())
                        lst2[i] = bolst3[i]
                else:
                    bolst2[i].setText("")
                    lst2[i] = "0"

                if lst_l[i].text().isdigit():
                    if lst_l[i].text() == "":
                        lst_l2[i].setText("")  
                    elif lst_l[i].text() != "":
                        lst_l3[i] = math.ceil(eval(lst_l[i].text())*0.01)
                        lst2[i+6] = lst_l3[i]
                else:
                    # lst_l2[i].setText("")
                    lst2[i+6] = "0"       
            else:
                lst2[i] = "0"
        
        lst2 = list(map(int,lst2))
        for k in lst2:
            sum += k
        if sum == 0:
            self.leader_whole_bonus.setText("0")
        else:
            self.leader_whole_bonus.setText(str(sum))

    def whole_sum(self):
        a = int(self.leader_whole_bonus.text())
        b = int(self.mate1_whole_bonus.text())
        c = int(self.mate2_whole_bonus.text())
        d = int(self.mate3_whole_bonus.text())
        self.bonus_sum.setText(str( a + b + c + d ))

    def click_1_1(self):
        if self.ch1.isChecked():
            self.ch2.setChecked(False)
            self.ch3.setChecked(False)
            self.ch4.setChecked(False)

    def click_1_2(self):
        if self.ch2.isChecked():
            self.ch1.setChecked(False)
            self.ch3.setChecked(False)
            self.ch4.setChecked(False)

    def click_1_3(self):
        if self.ch3.isChecked():
            self.ch1.setChecked(False)
            self.ch2.setChecked(False)
            self.ch4.setChecked(False)

    def click_1_4(self):
        if self.ch4.isChecked():
            self.ch1.setChecked(False)
            self.ch2.setChecked(False)
            self.ch3.setChecked(False)

    def click_2_1(self):
        if self.ch1_2.isChecked():
            self.ch2_2.setChecked(False)
            self.ch3_2.setChecked(False)
            self.ch4_2.setChecked(False)

    def click_2_2(self):
        if self.ch2_2.isChecked():
            self.ch1_2.setChecked(False)
            self.ch3_2.setChecked(False)
            self.ch4_2.setChecked(False)

    def click_2_3(self):
        if self.ch3_2.isChecked():
            self.ch1_2.setChecked(False)
            self.ch2_2.setChecked(False)
            self.ch4_2.setChecked(False)

    def click_2_4(self):
        if self.ch4_2.isChecked():
            self.ch1_2.setChecked(False)
            self.ch2_2.setChecked(False)
            self.ch3_2.setChecked(False)

    def click_3_1(self):
        if self.ch1_3.isChecked():
            self.ch2_3.setChecked(False)
            self.ch3_3.setChecked(False)
            self.ch4_3.setChecked(False)

    def click_3_2(self):
        if self.ch2_3.isChecked():
            self.ch1_3.setChecked(False)
            self.ch3_3.setChecked(False)
            self.ch4_3.setChecked(False)

    def click_3_3(self):
        if self.ch3_3.isChecked():
            self.ch1_3.setChecked(False)
            self.ch2_3.setChecked(False)
            self.ch4_3.setChecked(False)

    def click_3_4(self):
        if self.ch4_3.isChecked():
            self.ch1_3.setChecked(False)
            self.ch2_3.setChecked(False)
            self.ch3_3.setChecked(False)

    def click_4_1(self):
        if self.ch1_4.isChecked():
            self.ch2_4.setChecked(False)
            self.ch3_4.setChecked(False)
            self.ch4_4.setChecked(False)

    def click_4_2(self):
        if self.ch2_4.isChecked():
            self.ch1_4.setChecked(False)
            self.ch3_4.setChecked(False)
            self.ch4_4.setChecked(False)

    def click_4_3(self):
        if self.ch3_4.isChecked():
            self.ch1_4.setChecked(False)
            self.ch2_4.setChecked(False)
            self.ch4_4.setChecked(False)

    def click_4_4(self):
        if self.ch4_4.isChecked():
            self.ch1_4.setChecked(False)
            self.ch2_4.setChecked(False)
            self.ch3_4.setChecked(False)

    def click_5_1(self):
        if self.ch1_5.isChecked():
            self.ch2_5.setChecked(False)
            self.ch3_5.setChecked(False)
            self.ch4_5.setChecked(False)

    def click_5_2(self):
        if self.ch2_5.isChecked():
            self.ch1_5.setChecked(False)
            self.ch3_5.setChecked(False)
            self.ch4_5.setChecked(False)

    def click_5_3(self):
        if self.ch3_5.isChecked():
            self.ch1_5.setChecked(False)
            self.ch2_5.setChecked(False)
            self.ch4_5.setChecked(False)

    def click_5_4(self):
        if self.ch4_5.isChecked():
            self.ch1_5.setChecked(False)
            self.ch2_5.setChecked(False)
            self.ch3_5.setChecked(False)

    def click_6_1(self):
        if self.ch1_6.isChecked():
            self.ch2_6.setChecked(False)
            self.ch3_6.setChecked(False)
            self.ch4_6.setChecked(False)

    def click_6_2(self):
        if self.ch2_6.isChecked():
            self.ch1_6.setChecked(False)
            self.ch3_6.setChecked(False)
            self.ch4_6.setChecked(False)

    def click_6_3(self):
        if self.ch3_6.isChecked():
            self.ch1_6.setChecked(False)
            self.ch2_6.setChecked(False)
            self.ch4_6.setChecked(False)

    def click_6_4(self):
        if self.ch4_6.isChecked():
            self.ch1_6.setChecked(False)
            self.ch2_6.setChecked(False)
            self.ch3_6.setChecked(False)

if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    Form = QtWidgets.QWidget()
    ui = Ui_Form()
    ui.setupUi(Form)
    Form.show()
    sys.exit(app.exec_())
